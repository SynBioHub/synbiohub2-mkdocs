{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SynBioHub2 Documentation","text":"<p>Welcome to the documentation for SynBioHub2! This guide will help you understand how to use SynBioHub2, whether you're:</p> <ul> <li>A synthetic biologist looking to share your designs</li> <li>A developer integrating with our APIs</li> <li>An organization wanting to host your own instance</li> </ul> <p>The documentation is divided into various categories for your convenience, which you can see in the menu on the left.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<ul> <li> <p>On the SynBioHub home page, you can see various options regarding signing up, searching, uploading, and sharing your submissions.</p> </li> <li> <p>You can also view your profile, if you're already logged in.</p> </li> <li> <p>If you have any issues while registering and creating your user account, you can visit the Registering or Updating Account section for specific instructions.</p> </li> <li> <p>For specific instructions on how to view a particular record, you can visit the Viewing and Downloading Information section.</p> </li> <li> <p>For specific instructions on how to search for a particular record, navigate to the Searching for Information section.</p> </li> <li> <p>For specific instructions on how to update an existing collection, visit the Submitting, Managing and Updating Submissions section.</p> </li> <li> <p>For specific instructions on how to get your own SynBioHub local instance, visit the Installation section. For setting it up, you can get specific instructions in the Setup section.</p> </li> </ul>"},{"location":"1_getting_started/going_public/","title":"Going Public","text":""},{"location":"1_getting_started/going_public/#be-sure-you-have-finished-the-setup-first","title":"Be Sure You Have Finished The Setup First","text":"<p>If you haven't yet set an admin account and you go public, anyone will be able to create the admin user with their own password and steal the SynBioHub instance from you. This is obviously not what you want, so be sure to finish setup first.</p>"},{"location":"1_getting_started/going_public/#choosing-a-reverse-proxy","title":"Choosing A Reverse Proxy","text":"<p>A reverse proxy is needed to manage your SSL certificates and add an extra layer of protection to your network stack. Its primary role is to convert HTTPS requests to HTTP on your internal network and pass them to the correct application/port on your server. We also use it to add CORS headers which tells the browser to allow the new frontend to talk with the old backend.</p> <p>We use Caddy in production, but you can also use Nginx or Cloudflare Tunnels. This writer would recommend Cloudflare Tunnels for its ease of use and increased security.</p>"},{"location":"1_getting_started/installation/","title":"Installation","text":""},{"location":"1_getting_started/installation/#general","title":"General","text":"<p>The Docker Compose files in this repository contain various configurations for deploying SynBioHub2.</p> <p>The base configuration, described in <code>docker-compose.yml</code>, is simply SynBioHub2 (SynBioHub1 as frontend and SynBioHub3 as frontend), and its graph database Virtuoso with a health check added.</p> <p>To run the base configuration:</p> <ol> <li> <p>Before trying to run SynBioHub2 locally on your PC, make sure that you have Docker installed. If you want to download with git so you can download future changes or save your changes to your repository, be sure to also install Git (this is not required, although there may be something unexpected that requires git).</p> </li> <li> <p>Open the terminal/cmd. You may need to run some commands as administrator/superuser. If you run into any errors, try this first. </p> </li> <li> <p>Tip for Windows: You need to start the terminal app as admin, and you can't run individual commands as admin like on macOS or Linux. </p> </li> <li> <p>Tip for macOS/Linux: If your Linux distribution is older, Docker may not automatically add your user to its group. On Linux, this can be fixed by adding your user to the <code>docker</code> group with the <code>sudo usermod -aG docker $USER</code> command, you will need to reboot after this or at a minimum restart docker and logout. Alternatively, running Docker as <code>sudo docker</code> should always work on both macOS and Linux as long as Docker is running. Docker runs as a service on Linux (<code>sudo systemctl status docker</code>) and as an app on macOS.</p> </li> <li> <p>Navigate to the directory where you want to install SynBioHub2.</p> </li> </ol> <p><code>cd directory_name</code></p> <p>If you need a refresher on the terminal, feel free to read this article.</p> <ol> <li>Subsequently, enter the following command into your terminal:</li> </ol> <pre><code>git clone -b snapshot https://github.com/SynBioHub/SynBioHub2-docker\ncd SynBioHub2-docker\n</code></pre> <p>This downloads a copy of the snapshot branch, which is known to work.</p> <ol> <li>Then, enter the following command to start the local instance of SynBioHub2:</li> </ol> <p><code>docker-compose -f ./docker-compose.yml up</code></p> <p>This is the step where you most likely need to use root.    On macOS or Linux, add <code>sudo</code> to the start of the command before typing the rest.    On Windows, make sure you are in an admin terminal. If not, open a new terminal as admin, then redo step 3 and come back to step 5.</p> <ol> <li> <p>In your browser, search for <code>localhost:3333</code>, and it'll take you to a setup page when you run it for the very first time. From here, go to the NEXT STEP if you want to continue. If you want to know how to shut down SynBioHub2, continue reading.</p> </li> <li> <p>The following command stops a local instance of SynBioHub2 (but only if you are in the correct directory, see step 3):</p> </li> </ol> <p><code>docker-compose -f ./docker-compose.yml down</code></p>"},{"location":"1_getting_started/installation/#with-sbolexplorer","title":"With SBOLExplorer","text":"<p>You can also run SynBioHub2 by using SBOLExplorer. To add SBOLExplorer, add the <code>docker-compose.explorer.yml</code> to the main Docker Compose file, i.e., for step 5, run the following command:</p> <p><code>sysctl -w vm.max_map_count=262144</code></p> <p><code>docker-compose -f ./docker-compose.yml -f ./docker-compose.explorer.yml up</code></p> <p>The <code>sysctl -w vm.max_map_count=262144</code> command runs only on Linux; it is needed for Elasticsearch, a component of SBOLExplorer. It is likely unnecessary on MacOS.</p>"},{"location":"1_getting_started/installation/#with-plugins","title":"With Plugins","text":"<p>If you are unfamiliar with plugins, please read the docs.</p> <p>To add plugins to the configuration, change the command mentioned in step 5 to:</p> <p><code>docker-compose -f ./docker-compose.yml -f ./docker-compose.explorer.yml -f ./docker-compose.&lt;Plugin 1 File Name&gt;.yml -f ./docker-compose.&lt;Plugin 2 File Name&gt;.yml up</code></p> <p>Note that all plugins are added before the <code>up</code>, and each is preceded by <code>-f</code>. For example, to run the configuration with the VisualIgem plugins and the VisualSeqviz plugin, run:</p> <p><code>docker-compose -f ./docker-compose.yml -f ./docker-compose.explorer.yml -f ./docker-compose.pluginVisualIgem.yml -f ./docker-compose.pluginVisualSeqviz.yml up</code></p> <p>A table of currently available plugins can be found here.</p>"},{"location":"1_getting_started/installation/#installation-from-source","title":"Installation From Source","text":"<p>Installation from source is not recommended for non-contributors due to requiring many dependencies of specific versions.</p> <p>Follow the instructions on the following GitHub README to install SynBioHub2 locally onto your system.</p> <p>Next, you should set up your instance before going public</p>"},{"location":"1_getting_started/setup/","title":"SynBioHub Setup","text":"<p>When you first install SynBioHub locally and navigate to <code>http://localhost:3333/</code>, the setup page will load since you have not completed setup yet.</p> <p>You will see a welcome message saying, \"Congratulations, SynBioHub is successfully installed!\"</p> <p>Then, you need to fill out some details for configuring your local instance, which are as follows:</p>"},{"location":"1_getting_started/setup/#1-branding-your-synbiohub","title":"1. Branding Your SynBioHub","text":"<p>Pick a good Instance Name that describes what the server is. You can pick a logo for the top left of the header, and you can also change the color that will be used to theme most UI elements. Finally, you can pick if you want the instance to be public.</p>"},{"location":"1_getting_started/setup/#2-technical-details","title":"2. Technical Details","text":"<p>You can change these, but they should already be prefilled based on your URL, so we don't recommend modifying them. If you are deploying publicly, you will need to set up a reverse proxy to host both the frontend and backend at the same URL and port.</p>"},{"location":"1_getting_started/setup/#3-creating-your-first-user-account","title":"3. Creating Your First User Account","text":"<p>You need to create a user account that will have the first privileged access to your SynBioHub local instance. For that, you need to enter certain details, which are as follows:</p> Option Name Description Full Name Enter the name of the user. Affiliation (Optional) You can enter the name of the university/institute that you're currently affiliated to. Email Address Enter the Email Address through which you want to get registered. If in the future you forget your login credentials, then this shall be used for sending a recovery password for your account. Username You have to enter a username of your own choice. This shall be displayed on the record page of every record that you submit. Password Enter a password (preferably a strong one) for keeping your user account safe."},{"location":"1_getting_started/setup/#all-done","title":"All Done","text":"<p>Once you've filled all the details, click the continue button on the setup page. This will redirect you to the home page of your SynBioHub instance.</p> <p>Next, let's install some Plugins</p>"},{"location":"1_getting_started/tutorial_from_workshop/","title":"Tutorial from Workshop","text":"<p>We have released a workshop tutorial. The workshop shows how to setup a local instance of SynBioHub, utilize the SynBioHub API to interface with pySBOL, and how to create a simple plugin in SynBioHub.</p> <p>We appreciate any feedback or suggested improvements you have. If you have an error, please see report an issue. If you would like help with something or to discuss a potential feature, please see the mailing lists.</p>"},{"location":"1_getting_started/where_to_install/","title":"Where To Install","text":""},{"location":"1_getting_started/where_to_install/#the-options","title":"The options","text":"<p>For testing, you can install locally on your computer. However, if you don't have experience managing a server or aren't confident in your ability to keep it online 24/7, we recommend using a cloud/hosting provider. It's worth noting that your university IT might already have its own cloud environment setup or contracts, so you should probably check with them first.</p> Feature Self Host University Managed Cloud Managed VPS (Virtual Private Server) Management You University IT You (limited) / Managed Service You Availability Dependent on your setup Dependent on University IT setup High Medium to High Cost Hardware + Electricity Possibly Free Subscription Fee (Pay-as-you-go) Fixed Monthly Fee Experience Needed High Low Medium Medium Examples Your own hardware N/A AWS, Azure, Google Cloud, DigitalOcean Many Examples Considerations Requires technical expertise, less reliable Dependent on university policies and capabilities Can be expensive, complex pricing Fixed hardware for a fixed price, good for predictable budgets"},{"location":"1_getting_started/where_to_install/#minimum-requirements","title":"Minimum Requirements","text":"<p>We use Microsoft Azure, and it works quite well. Based on our experience, here are our suggested minimum and recommended specifications for a server.</p> Component Minimum Recommended OS Linux Ubuntu LTS CPU 4 Cores 4+ Cores RAM 5 GB 16 GB Storage 15 GB 50+ GB Bandwidth 500 mb/s 10 gb/s Software Linux with Docker &amp; Docker Compose Ubuntu 22 with Docker &amp; Docker Compose"},{"location":"2_micro_guides/","title":"What are Micro Guides?","text":"<p>This section contains instructions on how you can perform various operations, ranging from registering on SynBioHub to uploading your genetic designs on SynBioHub, by using the user interface of SynBioHub.</p>"},{"location":"2_micro_guides/Administration/","title":"Administration","text":"<p>Note: The administration section will only be available if you're using a SynBioHub local instance. If you're using a global instance, such as this one, then the administration section won't be available unless you have privileged access to SynBioHub.</p> <p>To access the admin page, the following steps need to be followed:</p> <ol> <li>Navigate to the home page of your SynBioHub local instance.</li> <li>Click on admin to access the administrative settings of your instance. This will direct you to the administrative page. It has been divided into several subsections for your convenience. They are discussed in detail as follows:</li> </ol>"},{"location":"2_micro_guides/Administration/#61-status","title":"6.1 Status","text":"<p>Several parameters essential for the smooth functioning of SynBioHub are mentioned in this subsection. They are as follows:</p> Parameter Description 1. Platform: Linux x64; 4.19.76-linuxkit This parameter represents the platform on which SynBioHub was built. 2. Node Version: vXX.X.X This represents the Node.js version on which your local instance is running. 3. Instance Name:  name_of_your_choice This represents the name of your SynBioHub instance. This can be changed based on your convenience. 4. Listen Port: 7777 When Oracle HTTP Server is started, by default, it listens for requests on port 7777 (non-SSL). If port 7777 is occupied, Oracle HTTP Server listens on the next available port number between a range of 7777-7877. Thus, if port 7777 is busy, it would listen on port 7778, and so on. To get more information on this, click here. 5. SPARQL Endpoint: http://virtuoso:8890/sparql A SPARQL Endpoint is a Point of Presence on an HTTP network that is capable of receiving and processing SPARQL Protocol requests. It is identified by a URL commonly referred to as a SPARQL Endpoint URL. To know more about SPARQL endpoints, click here. 6. Graph Store Endpoint: http://virtuoso:8890/sparql-graph-crud-auth/ This is the endpoint for the triplestore database where the data is stored. In this case, it is the endpoint for Virtuoso. 7. Default Graph: http://localhost:7777/public It is the URI prefix for the public graph in the database. 8. Graph Prefix: http://localhost:7777/ It is the URI prefix for all graphs in the database. 9. Thread Pool Size: It is the number of threads that Virtuoso is allowed to use. (But it is currently empty) 10. Upload Limit: X MB Shows the maximum limit of files that you can upload at once to your instance."},{"location":"2_micro_guides/Administration/#62-graphs","title":"6.2 Graphs","text":"<p>This section displays the graph URI and its corresponding triples. You can select the number of graphs you want to view on one page as well as search for any specific graphs with the help of the search box. You can also sort the graphs based on the number of triples.</p>"},{"location":"2_micro_guides/Administration/#63-log","title":"6.3 Log","text":"<p>This section displays the log file for your SynBioHub local instance. You can view 4 types of logs, which are as follows:</p> Name of the Log Description Error An error log is a record of critical errors that are encountered by SynBioHub while in operation. Some of the common entries in an error log include table corruption and configuration corruption. Error logs in many cases serve as extremely useful tools for troubleshooting and managing systems, servers, and even networks. Warn Used just to draw your attention, but it is considered to be normal activity usually and does not require any action. Info For standard, normally occurring operations. Debug These types of logs just give out debug information. <p>You may use the pointer to view different types of logs.</p>"},{"location":"2_micro_guides/Administration/#64-mail","title":"6.4 Mail","text":"<p>On this page, you have 2 options: SendGrid API key and SendGrid From email.</p> <p>In the first column, you need to fill in the API key that you'd need to generate from SendGrid. SendGrid is a cloud-based SMTP provider that allows you to send email without having to maintain email servers. SendGrid manages all of the technical details, from scaling the infrastructure to ISP outreach and reputation monitoring to whitelist services and real-time analytics.</p>"},{"location":"2_micro_guides/Administration/#641-setting-up-sendgrid","title":"6.4.1 Setting up SendGrid","text":"<p>To enable SynBioHub to send account-related emails, you need a SendGrid account and API key. The following steps need to be executed for setting up SendGrid:</p> <ol> <li>Visit this website.</li> <li>Select the Sign up option if you're using it for the first time.</li> <li>Enter your Email Address and password as well as select the captcha for verification.</li> <li>Fill up all the details about yourself on the \"Tell Us About Yourself\" page.</li> <li>Then, after filling up all the details correctly, it'll redirect you to your dashboard and send a confirmation Email.</li> <li>Click on the Settings option on the left-hand side of the page.</li> <li>Then, select the Create an API key option.</li> <li>It'll prompt you to give your API key a name. Also, you can customize the API key permissions.</li> <li>After completing these steps, click on Create and View.</li> <li>The API key is shown only once due to security reasons, so try to save it in a safe place.</li> <li> <p>Your API key has been created and is ready to use!</p> </li> <li> <p>SendGrid API key: For generating an API key, you need to have a SendGrid account. To sign-up for SendGrid and generate an API key, click here.</p> </li> <li>SendGrid From Email:  Here, you can enter the email which you can use for sending emails.</li> </ol>"},{"location":"2_micro_guides/Administration/#65-plugins","title":"6.5 Plugins","text":"<p>On this page, you can configure the plugins which you want to use. Plugins are modular stand-alone additions to SynBioHub. They function in a way that is similar to browser extensions. They can be installed separately from the browser/SynBioHub and provide additional 'custom' functionality to the browser/SynBioHub experience despite having a completely separate code base from the browser/SynBioHub. Though, they seem integrated to the user.</p> <p>They are broadly classified into 3 types, which are as follows:</p> <ol> <li> <p>Submit: Submit plugins are available to use from the submit endpoint. They work by taking in the file that is uploaded in the submit and processing it to return SBOL to the SynBioHub endpoint.</p> </li> <li> <p>Visual: Rendering plugins are available on all 'endpoint' pages, for example, pages for components, sequences, activities, etc. Rendering plugins return HTML to be displayed on the page.</p> </li> <li> <p>Download: Download plugins are available on all 'endpoint' pages, for example, pages for components, sequences, activities, etc. Download plugins return some kind of file which is downloaded by the user.</p> </li> </ol> <p>As mentioned above, the plugins are divided into 3 categories, all having the same attributes. The attributes which need to be filled up are as follows:</p> <ul> <li>Name: This is the name which you want to give to your plugin.</li> <li>URL: In this column, you need to enter the URL for your plugin. For more information about plugin URLs, see Adding plugins to the admin panel under the Plugins: 2.2.1.2 Adding plugins to the admin panel.</li> </ul> <p>After filling both of the columns, click on save to save your plugin.</p>"},{"location":"2_micro_guides/Administration/#66-registries","title":"6.6 Registries","text":"<p>SynBioHub also supports the Web of Registries concept, i.e., the idea of multiple separate repositories linked together by shared common semantics. In the case of SynBioHub, SBOL is used to support the common exchange of data, thus positioning SynBioHub to support the development of synthetic biology workflows by acting as a source and a storage facility for designs.</p> <p>Hence, Web Of Registries enables communication between SynBioHub instances. Sharing designs between instances of SynBioHub is also further facilitated via the Web of Registries service. Federated SynBioHub instances can reference parts in the public graph of other federated instances. To support this federation, the Web of Registries service maintains information about all SynBioHub registries, such as their name, description, administrator email, URI prefix, and uniform resource locator (URL).</p> <p>Any SynBioHub can access the Web Of Registries to determine information about all registered SynBioHub instances. If a design references a part within another SynBioHub instance, the information about this part can be fetched to render this design information locally and provide links to the corresponding design information page for this part.</p> <p>When a new SynBioHub instance wishes to join the Web of Registries, it sends its information to the Web of Registries service, and all the Web of Registries curators are alerted via email that there is a new repository pending approval. Once the repository has been approved, its information is broadcast to all other registries in the Web of Registries. Anybody can access the current list of registries through an HTTP GET request. Once registered, an instance of SynBioHub is able to locate designs within any other instance that is registered with the Web of Registries.</p> <p>SynBioHub demonstrates the application of this harmonized data exchange through existing repositories, hence envisaging a wider, integrated ecosystem of biological part information shared across a plethora of different repositories with different capabilities.</p> <ul> <li>On this page, you can configure the registry for your local instance. To configure the registry for your local instance, enter the administrator email in the column just beside the web-of-registries link. After entering the admin email, click on submit, and this would configure the admin email for the registries.</li> <li> <p>There are 2 options given just below the local web of registries subsection, which are:</p> </li> <li> <p>Retrieve from web of registries: This option shall retrieve the web of registries that are already existing globally, locally onto your instance, if in case you delete them.</p> </li> <li> <p>Add registry: This shall enable you to add a registry onto your instance. For adding, click on this option. Then, a popup shall appear. Subsequently, enter the registry URI prefix and the Registry URL. Finally, click on submit. This will add an already existing registry of SynBioHub to the list of registries on your SynBioHub local instance.</p> </li> <li> <p>Several local web-of-registries are also given on this page alongside their SynBioHub URL. Here, you have an option to save as well as delete the already existing registries.</p> </li> </ul>"},{"location":"2_micro_guides/Administration/#67-remotes","title":"6.7 Remotes","text":"<p>SynBioHub is capable of connecting to remote repositories to allow data to be transferred to and from these remote repositories.</p> <p>There are 2 types of remotes you can configure for SynBioHub, i.e., Benchling and ICE. They are discussed in detail as follows:</p> <ol> <li>Benchling: Benchling is an integrated software solution for experiment design, note-taking, and molecular biology. It is a free, intelligent research platform with tools for note-taking, molecular biology, and sample tracking. Benchling includes an electronic lab notebook, a molecular biology suite for design and analysis, and a bioregistry to track inventory.</li> <li>ICE: ICE is a registry platform that provides robust data storage for DNA components, integrated tools for part characterization, as well as mechanisms for secure access and information sharing with other users and software tools.</li> </ol> <p>Upon opening this page for the first time, you'll see a message stating: No remotes configured. To configure a remote for your instance, follow these steps:</p>"},{"location":"2_micro_guides/Administration/#671-configuring-a-benchling-remote","title":"6.7.1 Configuring a Benchling Remote","text":"<ol> <li>When you click on the type box, a dropdown menu shall appear containing 2 options: ICE and Benchling. For configuring a Benchling remote, select Benchling. Then click on add remote.</li> <li>As soon as you click on add remote, a popup shall appear asking you to fill up a certain set of attributes. They are as follows:</li> </ol> Attribute Description 1. ID Enter ID of the Benchling remote. 2. Type This shall display the type of remote that you would have chosen initially. 3. URL Enter the URL for the Benchling remote. 4. Sequence Suffix This represents the suffix to use for the sequences found on Benchling. 5. Default Folder ID Enter the default folder on Benchling to access. 6. Public Should be checked if you want the remote to be visible publicly. If not, then it should not be checked. 7. Reject Unauthorized Should be checked if you want the SSL certificates to be checked. If not, then it should not be checked. 8. Folder Prefix Represents the prefix to use for folders on Benchling. 9. Root Collection Display ID Represents the display ID for the root collection on the remote. 10. Root Collection Name This represents the name for the root collection on the remote. 11. Root Collection Description A brief description about the root collection on the remote. 12. Benchling API Token The token generated by Benchling should be entered here. <p>Once you are through with all the attributes, click on submit.</p> <ol> <li>Once you've clicked on submit, you'll be able to see a fully configured remote on the left. You can also delete and edit your remote. To delete any of your configured remotes, click on delete. To edit any of the information, click on edit. Once you've edited the information, click on submit.</li> </ol>"},{"location":"2_micro_guides/Administration/#examples-for-benchling-remote","title":"Examples for Benchling Remote","text":"<p>To configure a Benchling remote, the fields should have the values as follows:</p> <p>id - benchling type - benchling url - https://api.benchling.com/v1 sequence suffix - sequence default folder ID - lib_LHwAaloE folder prefix - folder root collection display id - benchling_collection root collection name - Benchling root collection description - Benchling collection of parts Benchling API Token - Benchling API Token Client - synbiohub.org Benchling API Token Owner - Benchling Collection - FEATURED Group ID - 4 PI - PI Email - Part Number Prefix - acs</p>"},{"location":"2_micro_guides/Administration/#672-configuring-an-ice-remote","title":"6.7.2 Configuring an ICE Remote","text":"<ol> <li>When you click on the type box, a dropdown menu shall appear containing 2 options: ICE and Benchling. For configuring an ICE remote, select ICE and then click on add remote.</li> <li>As soon as you click on add remote, a popup shall appear asking you to fill up a certain set of attributes. They are as follows:</li> </ol> Attribute Description 1. ID Enter ID of the ICE remote. 2. Type This shall display the type of remote that you would have chosen initially. 3. URL Enter the URL for the ICE remote. 4. Sequence Suffix This represents the suffix to use for the sequences found on ICE. 5. Default Folder ID Enter the default folder on ICE to access. 6. Public Should be checked if you want the remote to be visible publicly. If not, then it should not be checked. 7. Reject Unauthorized Should be checked if you want the SSL certificates to be checked. If not, then it should not be checked. 8. Folder Prefix Represents the prefix to use for folders on ICE. 9. Root Collection Display ID Represents the display ID for the root collection on the remote. 10. Root Collection Name This represents the name for the root collection on the remote. 11. Root Collection Description A brief description about the root collection on the remote. 12. ICE API Token The token generated by ICE should be entered here. 13. ICE API Token Client Domain of the client using the ICE API. 14. ICE API Token Owner Email address of the client using the ICE API. 15. ICE Collection Name of the ICE collection. 16. Group ID ID number for the ICE group. 17. PI Principal Investigator name should be entered. 18. PI Email Principal Investigator email should be entered. 19. Part Number Prefix Prefix that is to be used for the parts. <ol> <li>Once you've clicked on submit, you'll be able to see a fully configured remote on the left. You can also delete and edit your remote. To delete any of your configured remotes, click on delete. To edit any of the information, click on edit. Once you've edited the information, click on submit.</li> </ol>"},{"location":"2_micro_guides/Administration/#examples-for-ice-remote","title":"Examples for ICE Remote","text":"<p>To configure an ICE remote, the fields should have the values as follows:</p> <p>id - acs type - ice url - https://acs-registry.jbei.org sequence suffix - sequence default folder ID - ace_ice_folder folder prefix - ice_folder root collection display id - acs_collection root collection name - ACS Synthetic Biology root collection description - ICE repository for ACS Synthetic Biology Journal ICE API Token - ICE API Token Client - synbiohub.org ICE API Token Owner - ICE Collection - FEATURED Group ID - 4 PI - PI Email - Part Number Prefix - acs</p>"},{"location":"2_micro_guides/Administration/#68-sbolexplorer","title":"6.8 SBOLExplorer","text":"<p>SBOLExplorer is a service that simplifies the process of analyzing and searching for parts within genetic design repositories.</p> <p>Once you click on the SBOLExplorer option, you can view the following options: 1. The first option is that of SBOLExplorer endpoint. Here, you can enter and save your SBOLExplorer endpoint for your local instance. Also, make sure that any of the endpoints you enter end with \\. 2. Then on the right, you shall see searching using SBOLExplorer. You need to check this option to enable SBOLExplorer. 3. Then, you'll be able to see the option of selecting between Usearch and Vsearch*. They are explained in detail as follows:</p> <ul> <li>Usearch: UBLAST and USEARCH are new algorithms enabling sensitive local and global search of large sequence databases at exceptionally high speeds. They are often orders of magnitude faster than BLAST in practical applications, though sensitivity to distant protein relationships is lower. UCLUST is a new clustering method that exploits USEARCH to assign sequences to clusters. UCLUST offers several advantages over the widely used program CD-HIT, including higher speed, lower memory use, improved sensitivity, clustering at lower identities, and classification of much larger datasets.</li> <li> <p>Vsearch: VSEARCH is an open-source and free-of-charge multithreaded 64-bit tool for processing and preparing metagenomics, genomics, and population genomics nucleotide sequence data. It is designed as an alternative to the widely used USEARCH tool for which the source code is not publicly available, algorithm details are only rudimentarily described, and only a memory-confined 32-bit version is freely available for academic use.</p> </li> <li> <p>Next, you can view the start and the end of the last index update.</p> </li> <li>Subsequently, you can choose whether you want to allow the automatic updating of the index or not. If you check this option, then you'll also have the option of choosing the frequency of index update.</li> <li>Then, you have the option of whether you want to allow the option of a distributed search or not.</li> <li>Subsequently, you can select the value of page rank tolerance. PageRank is an algorithm that measures the transitive influence or connectivity of nodes. It can be computed by either iteratively distributing one node's rank (originally based on degree) over its neighbors or by randomly traversing the graph and counting the frequency of hitting each node during these walks.</li> <li>There is also an option of choosing a value of UClust clustering identity. UCLUST is an algorithm designed to cluster nucleotide or amino-acid sequences into clusters based on sequence similarity. The algorithm was published in 2010 and implemented in a program also named UCLUST. The algorithm is described by the author as following two simple clustering criteria, in regard to the requested similarity threshold T. The first criterion states that any given cluster's centroid sequence will have a similarity smaller than T to any other cluster's centroid sequence. The second criterion states that each member sequence in a given cluster will have similarity to the cluster's centroid sequence that is equal or greater than T.</li> <li>Then you can also input a value for the Elasticsearch endpoints. For applications without SSL or HTTPS protocol support, you can use a local endpoint with the HTTP protocol, which in turn connects to your Elastic Cloud Enterprise cluster or to Kibana either using the HTTP or the HTTPS protocol.</li> <li>Finally, you have to input a value for the SPARQL/Virtuoso endpoints. A Virtuoso SPARQL Endpoint is a feature of every Virtuoso RDBMS instance that offers an HTTP-based Query Service that operates on Entity Relationship Types (Relations) represented as RDF sentence collections using the SPARQL Query Language. These operations may be read- and/or write-oriented and distributed without compromising security, performance, or scalability.</li> <li>Then, click on the save button to save all the details for SBOLExplorer.</li> </ul>"},{"location":"2_micro_guides/Administration/#69-sparql","title":"6.9 SPARQL","text":"<p>This page can be used by administrators to perform any SPARQL query or update. Administrators can select any graph to query or update, and not only can they view data, but also delete or insert data using SPARQL queries. PLEASE BE EXTREMELY CAREFUL WHEN YOU USE THE UPDATE FEATURE AS YOU CAN CORRUPT THE DATASET.</p> <p>In the box provided just below the graphs dropdown, enter the SPARQL query. After writing your SPARQL query, just click submit query. After you click on submit query, the results of your query shall be displayed below the query box.</p>"},{"location":"2_micro_guides/Administration/#610-theme","title":"6.10 Theme","text":"<p>On this page, several options are available to alter the User Interface of your local instance.</p> <ul> <li> <p>You can choose to change the logo of your local instance, i.e., replace it with the default one by uploading a picture of your choice. To do so, click on choose file. On doing so, a popup shall appear displaying the .png or .jpeg files on your computer. Choose the file as per your convenience and then click on submit.</p> </li> <li> <p>You can also change the name of your SynBioHub local instance by typing in the name of your choice in the given instance name box.</p> </li> <li> <p>There is also an option to change the text that appears on the front page as soon as you open the front page of your local instance. To edit that text, a box is given wherein the default text is already written. You can simply edit the text in that very box with the text of your choice.</p> </li> <li> <p>Subsequently, there is a section titled instance settings. Under that, you can change the base color of your SynBioHub instance, which by default is hex. To search for more HTML color codes, click here. Also, you can also enable module interactions as well as remove the public enabled.</p> </li> </ul> <p>To save all changes, click on save.</p>"},{"location":"2_micro_guides/Administration/#611-users","title":"6.11 Users","text":"<p>This page lists all the users currently registered on your local instance.</p> <ul> <li> <p>There is an option to add a user for your local instance. To do so, click on add user. This will direct you to a page wherein you'll be required to fill the following details:</p> </li> <li> <p>Full Name: Enter the name of the person whose account you want to add.</p> </li> <li>Affiliation: This is an optional attribute. Enter the university/college to which that member belongs.</li> <li>Email: Enter the Email of the new member.</li> <li>Username: Assign a username to the member.</li> <li>Grant Administrative Access: There is an option to provide administrator access to this particular member. This shall enable him/her to edit each and every setting on your local instance, including the admin ones as well. To grant this particular access, check the grant administrative privileges box.</li> <li>Grant Member Privileges: There is an option to provide member access. To grant this particular access, check the grant member privileges box.</li> <li> <p>Grant Curator Privileges: There is an option to provide curator access. To grant this particular access, check the grant curator privileges box.</p> </li> <li> <p>You can also search for a particular user by entering the username in the search box.</p> </li> <li>You can choose the number of users that you want to display on a particular page, ranging from 10 to 100.</li> <li> <p>Then, a sortable list of users is displayed. Following is the list of details that is mentioned:</p> </li> <li> <p>Full Name: Enter the name of the person whose account you want to add.</p> </li> <li>Affiliation: This is an optional attribute. Enter the university/college to which that member belongs.</li> <li>Email: Enter the Email of the new member.</li> <li>Username: Assign a username to the member.</li> <li>Member: A checked or an empty box is displayed. A checked box means that the user has member rights, and if not, that means the user doesn't have member access.</li> <li>Curator: A checked or an empty box is displayed. A checked box means that the user has curator rights, and if not, that means the user doesn't have curator access.</li> <li>Admin: A checked or an empty box is displayed. A checked box means that the user has admin rights, and if not, that means the user doesn't have admin access.</li> </ul>"},{"location":"2_micro_guides/data_sharing_mechanism/","title":"Data Sharing Mechanism","text":""},{"location":"2_micro_guides/data_sharing_mechanism/#using-the-share-option","title":"Using the Share Option","text":"<ol> <li> <p>Select the collection/design that you want to share.</p> </li> <li> <p>Click the share option. Once you click on the share option, a link shall appear.</p> </li> <li> <p>Now, copy that link &amp; you can share the link, thereby sharing the resource.</p> </li> </ol>"},{"location":"2_micro_guides/data_sharing_mechanism/#adding-an-owner","title":"Adding an Owner","text":"<p>You can also share your design by giving any number of persons access by adding them as an owner for your design. This will give them full administrative access to your resources. The steps to do so are as follows:</p> <ol> <li> <p>Select the collection/design that you want to share.</p> </li> <li> <p>Click the share icon on the left-hand side.</p> </li> <li> <p>Click on the Select a user to add option.</p> </li> <li> <p>Select the Username of the person with whom you want to share your resources.</p> </li> <li> <p>Click on Grant Ownership.</p> </li> </ol>"},{"location":"2_micro_guides/registering_or_updating_account/","title":"Registering or Updating an Account","text":""},{"location":"2_micro_guides/registering_or_updating_account/#31-registering-an-account","title":"3.1 Registering an Account","text":"<p>Follow these steps to register on SynBioHub:</p> <ol> <li> <p>Navigate to SynBioHub's home page.</p> </li> <li> <p>Click on the Sign In option on the top right-hand side of your Screen.</p> </li> <li> <p>Click Join now at the bottom of the page.</p> </li> <li> <p>Enter the following details to complete your registration process:</p> </li> </ol> Option Name Description Full Name Enter the name of the user. Affiliation (Optional) You can enter the name of the university/institute that you're currently affiliated to. Email Address Enter the Email Address through which you want to get registered. If in the future you forget your login credentials, then this shall be used for sending a recovery password for your account. Username You have to enter a username of your own choice. This shall be displayed on the record page of every record that you submit. Password Enter a password (preferably a strong one) for keeping your user account safe. <ol> <li>Click Create Account.</li> </ol>"},{"location":"2_micro_guides/registering_or_updating_account/#32-updating-an-account","title":"3.2 Updating an Account","text":"<p>If you ever need to update your account, follow these steps:</p> <ol> <li> <p>You need to be logged in to update your account. Follow the previous set of steps to log in if you aren't logged in to your account.</p> </li> <li> <p>Then, click on the profile option. It'll redirect you to a page that contains your profile.</p> </li> <li> <p>On this page, update whichever section you want to, and then click on the save option at the bottom to successfully update your profile.</p> </li> </ol>"},{"location":"2_micro_guides/searching_for_info/","title":"Searching for Information","text":"<p>There are a variety of ways to search for information in SynBioHub, such as using keywords, sequences, advanced searches, and SPARQL queries. They are explained in detail as follows:</p>"},{"location":"2_micro_guides/searching_for_info/#11-keyword-search","title":"1.1 Keyword Search","text":"<p>To search amongst various records, follow these steps:</p> <ol> <li> <p>Navigate to SynBioHub's home page.</p> </li> <li> <p>Click on the search icon in the top right corner of the page. This will take you to the search page.</p> </li> <li> <p>In the search box, enter the keywords for the record you want to search for and click on the search button.</p> </li> <li> <p>Subsequently, you shall be directed to a list of records matching the keywords that you've entered. For each record, the first thing that is displayed is the name. Next to the name, the display ID, description, type of the record, and privacy shall be displayed. The description column contains a brief description provided by the owner of that particular record. On the right-hand side, there is an indicator displaying whether it is a public, private, or a remote record. The privacy labels indicate:</p> <ul> <li>Private: The record is available only to specific users through a private repository.</li> <li>Public: The record is accessible to all SynBioHub users.</li> <li>Remote: The record is publicly available but hosted on another instance of SynBioHub.</li> </ul> </li> <li> <p>If you see the record you want, you can select it. Else, you can select next or any of the other page numbers to navigate to the other pages to look for the record you desire amongst other records.</p> </li> <li> <p>On this page, you are also able to see other search options, such as sequence, advanced, or SPARQL search, which are described in detail in the upcoming sections.</p> </li> <li> <p>In the search box, enter the keywords for the record you want to search for and click on the search button.</p> </li> <li> <p>Subsequently, you shall be directed to a list of records matching the keywords that you've entered. For each record, the first thing that is displayed is the name. Next to the name, the display ID, description, type of the record, and privacy shall be displayed. The description column contains a brief description provided by the owner of that particular record. On the right-hand side, there is an indicator displaying whether it is a public, private, or a remote record. The privacy labels indicate:</p> <ul> <li>Private: The record is available only to specific users through a private repository.</li> <li>Public: The record is accessible to all SynBioHub users.</li> <li>Remote: The record is publicly available but hosted on another instance of SynBioHub.</li> </ul> </li> <li> <p>If you see the record you want, you can select it. Else, you can select next or any of the other page numbers to navigate to the other pages to look for the record you desire amongst other records.</p> </li> <li> <p>On this page, you are also able to see other search options, such as sequence, advanced, or SPARQL search, which are described in detail in the upcoming sections.</p> </li> </ol>"},{"location":"2_micro_guides/searching_for_info/#12-sequence-search","title":"1.2 Sequence Search","text":"<p>On the search results page, there is a button labeled sequence search. Clicking on that button will direct you to a page containing a list of sequence search options. To search using a sequence, you can provide the values for the options, as described in the table below:</p> Option Name Description Enter Sequence Enter the sequence or upload a FASTA/FASTQ file by clicking the choose file option just below the box. This shall search only for exact matches of the sequence. Your entry must be the first key/value pair. Search Method You can choose the perspective of your search. You can perform a global search or an exact search. The exact search shall display those records which are an exact match to the sequences that you've entered, and the global search will display those results which have even the smallest of similarities to the sequence that you've entered. Number of Results You may customize the number of results, the value for which must not exceed 10,000. This translates into the maximum number of hits to accept before stopping the search. Kindly note that the higher the value, the longer the runtime. Minimum Sequence Length You need to enter the minimum sequence length. This value specifies the minimum length of the sequence which you want to search for. Values for this parameter should not exceed 100,000. Maximum Sequence Length You need to enter the maximum sequence length. This value specifies the maximum length of the sequence which you want to search for. Values for this parameter should not exceed 100,000. # of failed hits before stopping Then, you need to enter the maximum number of non-matching target sequences that are to be considered before the search is halted. This option works in pair with the flag above. The search process sorts the target sequences by decreasing number of k-mers they have in common with the query sequence, using that information as a proxy for sequence similarity. After pairwise alignments, if none of the first x examined target sequences pass the acceptance criteria, the search process stops for that query (no hit). If this flag is set to a higher value, more target sequences are considered. If the flag above and this flag are both set to 0, the complete database is searched. Percent Match Then, we have the percentage match, which has a value between 0 and 1. This is the value of pairwise identity that must match with the sequence; otherwise, the sequence is rejected. Pairwise Identity Definition You may select the value for this attribute from the following options: 1) Default: Edit distance excluding the terminal gaps,   2) CD-HIT definition: Considers the following ratio: (matching columns) / (shortest sequence length),   3) Marine Biological Lab definition: counts each gap opening (internal or terminal) as a single mismatch, whether or not the gap was extended: 1.0 - [(mismatches + gap openings)/(longest sequence length)],   4) BLAST Definition: equivalent to edit distance for global pairwise alignments. <p>After filling up the desired options, press the search button to get the search results.</p>"},{"location":"2_micro_guides/searching_for_info/#13-advanced-search","title":"1.3 Advanced Search","text":"<p>On the search results page, there is a column on the left-hand side that contains a list of advanced search options. To search using advanced parameters, you can provide the values for the option as described in the table below. The records that will be displayed will match all of the criteria that you will fill in. Kindly note that you don't need to fill in all of the options. The options are as follows:</p> Option Name Description Object Type The type of the record you want to search for, i.e., a collection, design, activity, etc. Creator The username of the record's creator. Created After and Created Before The timeframe in which the record was created. Make sure to enter the dates in the YYYY-MM-DD format. Modified After Modified Before The timeframe in which the record was last modified. Make sure to enter the dates in the YYYY-MM-DD format. ID/Name/Description Enter the ID, name, or description of the record which you want to search for. Type Select the type of the record from the following available options in the dropdown menu, for example: No filter, biopax:Complex, biopax:DnaRegion, biopax:Protein, so:circular, etc. Role Select the role of the record from this dropdown menu. It contains various subcategories of igem or SO. Collections You may select any number of collections based on your convenience. To select a collection, click on the value attribute of the collection and select it from the dropdown menu. Customizable Filters You may apply customized filters for the design you want to search for. For that purpose, click add filter, and a dropdown menu will appear having various parameters for filtering. These parameters are basically the properties for filtering the records. Select the property that you want your record to be filtered by, and then click on filter. This shall reload the page, and then select the value of the filter from the dropdown on the right-hand side. You may provide as many as 5 customized filters, which are optional. <p>After selecting the desired options for performing a search using advanced parameters, click search. This will return the records after comprehending all the details that you've entered.</p> <ul> <li>Just below, there is an option to create a new collection as well. If you wish to create a collection from your search results, you need to fill in the following items:</li> </ul> Option Name Description Collection Name This is the name string that will be assigned to the submission. Collection Description This is the description string that briefly explains your submission. Collection ID This is a user-defined alphanumeric string identifier for the submission, and it should contain alphanumeric and underscore characters only. Collection Version This is the alphanumeric string which is associated with the submission. <p>After you've filled in all the available options, click on create collection. This will return the search results to you in the form of a private collection.</p>"},{"location":"2_micro_guides/searching_for_info/#14-sparql-search","title":"1.4 SPARQL Search","text":"<p>On the search results page, there is a button labeled SPARQL. Clicking on that button will direct you to the SPARQL page. Since SPARQL is a query language, it will query SynBioHub's databases for the designs that you are looking for. On the SPARQL page, you can select the graph that is from private or public. Here, public means searching amongst the public submissions that can be viewed by all, and private means the ones that are your personal collections.</p> <p>In the box provided just below the graphs dropdown, enter the SPARQL query. Following is an example that selects all SBOL components that have an SO role type. It returns the part title, part role, part display ID, part URI, and the total number of parts returned by the query. If you want to search for other types of designs, just replace SBOL with your preferred type:</p> <pre><code># Some common prefixes are also provided below, which you can use in your SPARQL queries.\nPREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\nPREFIX dcterms: &lt;http://purl.org/dc/terms/&gt;\nPREFIX dc: &lt;http://purl.org/dc/elements/1.1/&gt;\nPREFIX sbh: &lt;http://wiki.synbiohub.org/wiki/Terms/synbiohub#&gt;\nPREFIX prov: &lt;http://www.w3.org/ns/prov#&gt;\nPREFIX sbol: &lt;http://sbols.org/v2#&gt;\nPREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;\nPREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX purl: &lt;http://purl.obolibrary.org/obo/&gt;\n\nSELECT\n    ?def # directs you to the design for which you are looking for \n    ?displayId # This statement displays the ID of the design\n    ?title # displays the title of the design\n    (COUNT(?def) as ?count) # displays the count parameter for the design\n    ?role # displays the role of the design    \nWHERE { \n    ?s sbol:component ?comp # Searching for **sbol** components\n    ?comp sbol:definition ?def # provides the link to that component\n    FILTER (REGEX(?role, 'http://identifiers.org/so/SO:')) \n    OPTIONAL {?def sbol:role ?role} # Defines the role\n    OPTIONAL {?def sbol:displayId ?displayId} # gives the ID of that particular record\n    OPTIONAL {?def dcterms:title ?title} \n}\n</code></pre> <p>After writing your SPARQL query, just click submit query. After you click on submit query, the results of your query shall be displayed below the query box.</p>"},{"location":"2_micro_guides/searching_for_info/#15-searching-on-a-record-page","title":"1.5 Searching on a Record Page","text":"<p>On a record page, under the search button, you may find the following options:</p>"},{"location":"2_micro_guides/searching_for_info/#151-searching-for-uses","title":"1.5.1 Searching for Uses","text":"<p>This returns other records that refer to this particular record which you are currently viewing. For example, if this is an engineered region, then it will return all other components that use this as a subcomponent.</p>"},{"location":"2_micro_guides/searching_for_info/#152-search-for-twin-components","title":"1.5.2 Search for Twin Components","text":"<p>If the record being viewed is a component, then you will also have the option to search for twin components. A twin is another component that has the same sequence as the object being viewed. So, selecting this option will return all the records having the same sequence as the object that you would be currently viewing.</p>"},{"location":"2_micro_guides/searching_for_info/#153-search-for-similar-components","title":"1.5.3 Search for Similar Components","text":"<p>If the record being viewed is a component and SBOLExplorer is being run on that particular SynBioHub instance, then you will also have the option to search for similar components. A component is similar when the sequences are close enough that SBOLExplorer has clustered those 2 components together into the same cluster.</p>"},{"location":"2_micro_guides/submitting%2C_managing_and_updating_submissions/","title":"Submitting, Managing, and Updating Submissions","text":""},{"location":"2_micro_guides/submitting%2C_managing_and_updating_submissions/#41-submitting","title":"4.1 Submitting","text":"<p>To submit your designs to SynBioHub, follow these steps:</p> <ol> <li> <p>Navigate to SynBioHub's home page.</p> </li> <li> <p>Click on the Submit option, and it will direct you to the Submit page.</p> </li> </ol> <p>Now, there are two ways to make your submissions: creating a new collection and then submitting your resource, or submitting to an existing collection.</p>"},{"location":"2_micro_guides/submitting%2C_managing_and_updating_submissions/#411-creating-a-new-collection","title":"4.1.1 Creating a New Collection","text":"<ol> <li> <p>Select the New collection option.</p> </li> <li> <p>Fill in the following attributes:</p> </li> <li> <p>Name: This is the name string that will be assigned to the submission.</p> </li> <li>Collection Description: This is the description string that briefly explains your submission.</li> <li>Collection ID: This is a user-defined string identifier for the submission and should contain alphanumeric and underscore characters only.</li> <li>Collection Version: This is the version string associated with the submission.</li> <li>Citations (optional): This is a list of comma-separated PubMed IDs of citations to store with the submission, just for reference. It is an optional attribute.</li> <li> <p>SBOL/GENBANK/GFF3/FASTA/ZIP file (OPTIONAL): The file should be of the following types:</p> Type Description SBOL The Synthetic Biology Open Language (SBOL) has been developed as a standard to support the specification and exchange of biological design information in synthetic biology. GFF3 The GFF (General Feature Format) format consists of one line per feature, each containing 9 columns of data, plus optional track definition lines. FASTA In bioinformatics and biochemistry, the FASTA format is a text-based format for representing either nucleotide sequences or amino acid (protein) sequences, in which nucleotides or amino acids are represented using single-letter codes. The format also allows for sequence names and comments to precede the sequences. The format originates from the FASTA software package but has now become a near-universal standard in the field of bioinformatics. zip ZIP is an archive file format that supports lossless data compression. A ZIP file may contain one or more files or directories that may have been compressed. <p>To submit a file, you must have already submitted the collection. Once you do, you can click Submit, and it will submit to the collection just created.</p> </li> <li> <p>Handler: You also need to select a handler. By default, only one option is provided, but more handlers can be added via submit plugins.</p> </li> <li> <p>Finally, you have an option to overwrite the existing objects in that collection, i.e., removing all the existing objects in the collection and adding new ones, or keeping the old resources and adding the new ones.</p> </li> <li> <p>Finally, click on Submit.</p> </li> </ol>"},{"location":"2_micro_guides/submitting%2C_managing_and_updating_submissions/#412-submitting-to-an-existing-collection","title":"4.1.2 Submitting to an Existing Collection","text":"<ol> <li> <p>Select the add to existing collection option.</p> </li> <li> <p>Then, select your desired collection to which you want to add your submission from the dropdown menu.</p> </li> <li> <p>Subsequently, upload the files you want to submit. The file should be of the following types:</p> </li> </ol> Type Description SBOL The Synthetic Biology Open Language (SBOL) has been developed as a standard to support the specification and exchange of biological design information in synthetic biology. To know more about SBOL, visit this page. Annotated zip ZIP is an archive file format that supports lossless data compression. A ZIP file may contain one or more files or directories that may have been compressed. To know more about zip, visit this page. GFF3 The GFF (General Feature Format) format consists of one line per feature, each containing 9 columns of data, plus optional track definition lines. To know more about GFF3, click here. FASTA In bioinformatics and biochemistry, the FASTA format is a text-based format for representing either nucleotide sequences or amino acid (protein) sequences, in which nucleotides or amino acids are represented using single-letter codes. The format also allows for sequence names and comments to precede the sequences. The format originates from the FASTA software package but has now become a near-universal standard in the field of bioinformatics. To know more about FASTA file format, click here. Zip ZIP is an archive file format that supports lossless data compression. A ZIP file may contain one or more files or directories that may have been compressed. To know more about zip, visit this page. <ol> <li> <p>Finally, you have an option to overwrite the existing objects in that collection, i.e., removing all the existing objects in the collection and adding new ones, or keeping the old resources and adding the new ones.</p> </li> <li> <p>At last, click on submit.</p> </li> </ol>"},{"location":"2_micro_guides/submitting%2C_managing_and_updating_submissions/#42-managing-submissions","title":"4.2 Managing Submissions","text":"<ol> <li> <p>Navigate to SynBioHub's home page.</p> </li> <li> <p>Click on manage submissions. On this page, you will be able to see collections broadly divided into two categories. The first one is public collections, which you have created and only you have access to them, and the second one is private collections, to which all users have access.</p> </li> <li> <p>You can view your collection by clicking on the collection name.</p> </li> <li> <p>To make your collection public, click on the collections you want (using the checkboxes on the left-hand side), then click on Publish. This will enable other users to view your collection and its contents.</p> </li> <li> <p>To delete your collection, click on Remove. This will remove the collection as well as the resources contained in that specific collection, namely promoters, activators, modules, components, engineered regions, etc.</p> </li> </ol>"},{"location":"2_micro_guides/submitting%2C_managing_and_updating_submissions/#43-updating-submissions","title":"4.3 Updating Submissions","text":"<ol> <li> <p>On the submit page, select the collection you want to submit your design to.</p> </li> <li> <p>Select the design that you want to submit.</p> </li> <li> <p>You may choose to overwrite the existing objects in a collection.</p> </li> <li> <p>Then, click on Submit.</p> </li> </ol>"},{"location":"2_micro_guides/submitting%2C_managing_and_updating_submissions/#44-editing-a-submission","title":"4.4 Editing a Submission","text":"<p>To edit your submissions, follow these steps:</p> <ol> <li> <p>Go to the submissions page.</p> </li> <li> <p>Select the collection that you want to edit.</p> </li> <li> <p>First of all, you can edit the name and description of the record.</p> </li> <li> <p>Then, you can add a source for your record.</p> </li> <li> <p>Subsequently, you may add a brief description for your record. This may contain details that can be described briefly about that particular record.</p> </li> <li> <p>As you scroll down, you will find a clickable menu titled details. Under this section, you can find the following options which you can edit. They are as follows:</p> </li> <li> <p>Add Description: Here, you can provide a detailed description for your record.</p> </li> <li> <p>Add notes: In this section, you can provide additional notes for explaining your record.</p> <p>Here you can use basic text formatting options, such as bold, italic, and underlining. Also, you may include an image as well as links with the use of HTML tags.</p> </li> <li> <p>Source: Here, you can enter various links referring to the place from where your record has been generated.</p> </li> <li> <p>Citations: You just need to add PubMed IDs separated by commas, using which you can cite several research papers.</p> </li> <li> <p>Then, we have the section titled other properties. Under this section, you can add/edit various properties, other than Synbiohub#ownedBy and Synbiohub#topLevel.</p> </li> <li> <p>Finally, we have the attachments section. Herein, you can upload as well as look up an attachment. The process for both options is described in detail as follows:</p> </li> <li> <p>Upload attachments: To upload an attachment, you just need to click the select file(s) option, and a popup shall appear. Now you need to select the attachments from your machine based on your convenience.</p> </li> <li>Lookup attachment: Under this option, you can search for attachments. For this, you need to provide a URL for the attachment as well as its name. Then you need to select the type of attachment for which you want to search. The types are as follows: .nib, 2bit, A2M, ABI, etc...</li> </ol>"},{"location":"2_micro_guides/submitting%2C_managing_and_updating_submissions/#45-add-to-an-existing-collection","title":"4.5 Add to an Existing Collection","text":"<p>On some record pages, you might find an option titled add to an existing collection. Using this option, you can add the record you are currently viewing to a collection that is already there. For that, simply follow these steps:</p> <ul> <li>Click add to collection. This will direct you to a page consisting of a dropdown menu.</li> <li>Then, click on that dropdown menu. This will contain a list of collections that are already existing, and the record which you are currently viewing can be added to it.</li> <li>Then, select the collection as per your convenience from the dropdown menu.</li> <li>Finally, click add to collection.</li> </ul> <p>This shall add the record or the collection you are currently viewing to the collection you have selected.</p>"},{"location":"2_micro_guides/viewing_and_downloading_information/","title":"Viewing and Downloading Information","text":""},{"location":"2_micro_guides/viewing_and_downloading_information/#21-viewing-the-information","title":"2.1 Viewing the Information","text":"<p>There are various types of records on SynBioHub. They have been divided into the following sub-categories:</p>"},{"location":"2_micro_guides/viewing_and_downloading_information/#211-viewing-a-record","title":"2.1.1 Viewing a Record","text":"<p>This section consists of a general description of all record pages; i.e., this is what a general record page looks like. Additional sections (if any) are further explained in the following sections, under the respective record types. Once you have successfully navigated to the record's home page, you will be able to view the parameters in this order:</p> <ul> <li> <p>Name: Represents the name of that particular record.</p> </li> <li> <p>ID and version: The next line represents the ID and the version of that record. Every record has a specific ID associated with it and a version, which represents the number of times it has been modified.</p> </li> <li> <p>Description: This will provide some insight on the collection/part/etc.</p> </li> <li> <p>Type: This specifies the category of biochemical or physical entity. For example DNA, protein, or small molecule that a ComponentDefinition object abstracts for the purpose of engineering design.</p> </li> <li> <p>Generated by: Represents the source from where that record had been generated.</p> </li> <li> <p>Then, we have five clickable options:</p> </li> <li>Share</li> <li>Download</li> <li>Copy</li> <li> <p>Add to a collection</p> </li> <li> <p>Then, we have the details of that record, which consist of the following:</p> </li> <li> <p>Type: This specifies the category of biochemical or physical entity. For example DNA, protein, or small molecule that a ComponentDefinition object abstracts for the purpose of engineering design.</p> </li> <li>Role: Clarifies the potential function of an entity in a biochemical or physical context. When it is used for ComponentDefinitions, it MUST identify terms from ontologies that are consistent with the types property of the ComponentDefinition.</li> <li>Sequence: The purpose of the Sequence class is to represent the primary structure of a ComponentDefinition object and the manner in which it is encoded. This representation is accomplished by means of the elements property and encoding property.</li> <li> <p>Also, you can view reference as well as citations.</p> </li> <li> <p>Then, we have the section named other properties, which consists of the following attributes:</p> </li> <li> <p>Ontology for Biomedical Investigations(OBI): A centrally registered identifier symbol used to uniquely identify objects given by International DOI Foundation. The DOI system is particularly used for electronic documents such as journal articles.</p> </li> <li>SynBioHub#Owned_by: Username of the design owner.</li> <li> <p>SynBioHub#TopLevel : Refers to the name of collection</p> </li> <li> <p>Subsequently, we have the section titled Member. This section contains the list of collections to which that particular resource belongs.</p> </li> <li> <p>Then, we have the Attachments section, where you can view the various attachments of a resource.</p> </li> <li> <p>Additional information may be rendered for a record via visualization plugins.</p> </li> </ul>"},{"location":"2_micro_guides/viewing_and_downloading_information/#212-viewing-a-collection","title":"2.1.2 Viewing a Collection","text":"<p>Collection basically groups together a set of TopLevel objects that have something in common.</p> <p>On a collection's home page, other than the details mentioned in the general section, you will be able to view a section titled members. This section contains the list of records included in this particular collection. A general description of this section is as follows:</p> <ul> <li> <p>Filtering the Table: The first parameter in this section is filtering the table of contents. This is a dropdown menu, which contains various parameters based upon which the table of contents can be filtered. It contains various options such as showing all objects, showing only root objects, Biopic:Complex, etc. You may select the option of your choice from this dropdown menu and then click on filter. This will filter the table and display only those contents that are as per the parameter you have selected.</p> </li> <li> <p>Show X Members: This is also a dropdown menu, which contains integer strings (10,25,50,100,all) that you want to be displayed on a single page.</p> </li> <li> <p>Search: By using this search option, you can search for the records of your own choice, just by providing its name. It looks for occurrences in both Name and Identifier.</p> </li> <li> <p>Table: Then, we have the table of contents. It contains the records that are in that particular collection. This is a sortable table and can be sorted on the basis of multiple parameters ranging from identifier, type or description.</p> </li> </ul> <p>The header of the table is explained as follows:</p> Table Header Description Name This contains the name of each and every record that is in that collection, that is provided by the user who had submitted that particular record. Just beside the header, there is a small figure; clicking on it will sort this table alphabetically in reverse order (Z-A). Identifier This contains the ID or the identifier of that particular record, that is provided by the user who had submitted that particular record. Just beside the header, there is a small figure; clicking on it will sort this table alphabetically in reverse order (Z-A). Type This represents the type of the record, i.e. whether it is a module, sequence, activity, etc. Description This is a brief description provided by the user who had submitted that particular record. This description, in brief, describes what that particular record does."},{"location":"2_micro_guides/viewing_and_downloading_information/#213-viewing-a-module-definition","title":"2.1.3 Viewing a Module (Definition)","text":"<p>A Module represents a grouping of structural and functional entities in a biological design. Once you have successfully navigated to the Module's home page, other than the parameters described in the general section, you will be able to view a few other parameters, as follows:</p> <ul> <li>Type: The record type, as is obvious, will be displayed as Module. A Module represents a grouping of structural and functional entities in a biological design.</li> </ul> <p>Just below the clickable options, the VisBOL navigator is located, which displays the structure of that particular module. VisBOL is a web-based application that allows the rendering of genetic circuit designs, enabling synthetic biologists to visually convey designs in SBOL visual format. VisBOL designs can be exported to formats including PNG and SVG images to be embedded in Web pages, presentations and publications. The VisBOL tool enables the automated generation of visualizations from designs specified using the Synthetic Biology Open Language (SBOL) version 2.0, as well as a range of well-known bioinformatics formats including GenBank and Pigeoncad notation. The VisBOL Navigator also has zooming capabilities. This graphically represents the structure of the module. By hovering your pointer over this structure, you can view the following attributes of that particular module: type of resource, identifier, name, and role of the module.</p> <p>Then, we have the section titled functional components. A FunctionalComponent is an instance of a ComponentDefinition being used as part of a ModuleDefinition. The ModuleDefinition describes how the FunctionalComponent interacts with others and summarizes their aggregate function. The parameters included in this section are described in the table below:</p> Parameter Name Description Access/Direction 1) Access: The access property is a REQUIRED URI that indicates whether the ComponentInstance can be referred to remotely by a MapsTo on another ComponentInstance or Module contained by a different parent ComponentDefinition or ModuleDefinition (one that does not contain this ComponentInstance).  2) Direction:Each FunctionalComponent MUST specify via the direction property whether it serves as an input, output, both, or neither for its parent ModuleDefinition object. Definition and MapsTo 1) Definition: The definition property is a REQUIRED URI that refers to the ComponentDefinition of the ComponentInstance. ComponentDefinition effectively provides information about the types and roles of the ComponentInstance.  2) MapsTo: When ComponentDefinition and ModuleDefinition objects are composed into structural and functional hierarchies using ComponentInstance and Module objects, it is often the case that some ComponentInstance objects are intended to represent the same entity in the overall design. The purpose of the MapsTo class is to make these identity relationships clear and explicit. For example, consider a ModuleDefinition for a genetic inverter that includes a FunctionalComponent for an abstract repressor protein. When this ModuleDefinition is instantiated within a \u201chigher level\u201d ModuleDefinition that includes a FunctionalComponent for a LacI protein, the MapsTo object can be used to indicate that the repressor protein in the first ModuleDefinition is LacI in the context of the composite design. Public and Inout 1) Public: Indicates that a ComponentInstance MAY be referred to by remote MapsTo objects. 2) Inout: Indicates that the FunctionalComponent is both an input and output. <p>Subsequently, just below the functional components, we have the Interactions section. Interaction basically provides a more detailed description of how the FunctionalComponent objects of a ModuleDefinition are intended to work together. It has a table consisting of the following attributes:</p> Name Description Interaction/Participation 1) Interaction: Provides more detailed description of how the FunctionalComponent objects of a ModuleDefinition are intended to work together.   2) Participation: Each Participation represents how a particular FunctionalComponent behaves in its parent Interaction. Participant Definition The definition property is a REQUIRED URI that refers to the ComponentDefinition of the ComponentInstance. As described in the previous section, this ComponentDefinition effectively provides information about the types and roles of the ComponentInstance. Type/Role 1) Type: Specifies the category of biochemical or physical entity. For example DNA, protein, or small molecule that a ComponentDefinition object abstracts for the purpose of engineering design. For DNA or RNA entities, additional types fields are used to describe nucleic acid topology (circular / linear) and strandedness (double- or single-stranded).  2) Role: Clarifies the potential function of an entity in a biochemical or physical context. When it is used for ComponentDefinitions, it MUST identify terms from ontologies that are consistent with the types property of the ComponentDefinition. For example, the roles property of a DNA or RNA ComponentDefinition could contain URIs identifying terms from the Sequence Ontology (SO). It may be a product, genetic production, template, etc."},{"location":"2_micro_guides/viewing_and_downloading_information/#214-viewing-a-component-definition","title":"2.1.4 Viewing a Component (Definition)","text":"<p>Component (Definition) is used to represent biological design components such as DNA, RNA and small molecules. Once you have successfully navigated to the component\u2019s home page, other than the parameters described in the general section, you will be able to view a few other parameters, which are described below.</p> <p>Just below the details table, you will be able to view a table titled components, which has the following parameters:</p> Name Description Access The access property is a REQUIRED URI that indicates whether the ComponentInstance can be referred to remotely by a MapsTo on another ComponentInstance or Module contained by a different parent ComponentDefinition or ModuleDefinition (one that does not contain this ComponentInstance) Instance The ComponentInstance abstract class is inherited by SBOL classes that represent the usage or occurrence of a ComponentDefinition within a larger design (that is, another ComponentDefinition or ModuleDefinition). Definition The definition property is a REQUIRED URI that refers to the ComponentDefinition of the ComponentInstance. As described in the previous section, this ComponentDefinition effectively provides information about the types and roles of the ComponentInstance. <p>Below the components table is another table titled sequence annotations, having the following attributes:</p> Name Description Sequence Annotations The SequenceAnnotation class describes one or more regions of interest on the Sequence objects referred to by its parent ComponentDefinition. In addition, SequenceAnnotation objects can describe the substructure of their parent ComponentDefinition through association with the Component objects contained by this ComponentDefinition. Location Extended by the Range, Cut, and GenericLocation classes. Components/Role 1) Components: The components property is OPTIONAL and MAY specify a set of Component objects that are contained by the ComponentDefinition. The set of relations between Component and ComponentDefinition objects is strictly acyclic.   2) Role: Clarifies the potential function of an entity in a biochemical or physical context. When it is used for ComponentDefinitions, it MUST identify terms from ontologies that are consistent with the types property of the ComponentDefinition. For example, the roles property of a DNA or RNA ComponentDefinition could contain URIs identifying terms from the Sequence Ontology (SO)."},{"location":"2_micro_guides/viewing_and_downloading_information/#215-viewing-a-sequence","title":"2.1.5 Viewing a Sequence","text":"<p>The purpose of the Sequence class is to represent the primary structure of a ComponentDefinition object and the manner in which it is encoded. This representation is accomplished by means of the elements property and encoding property. Once you have successfully navigated to the sequence\u2019s home page, other than the parameters described in the general section, you will be able to view a few other parameters, which are described below.</p> <p>Under the details section, the sequence is displayed. Another option, titled blast, is also there. The Basic Local Alignment Search Tool (BLAST) finds regions of local similarity between sequences. The program compares nucleotide or protein sequences to sequence databases and calculates the statistical significance of matches. BLAST can be used to infer functional and evolutionary relationships between sequences as well as help identify members of gene families.</p>"},{"location":"2_micro_guides/viewing_and_downloading_information/#216-viewing-an-activity","title":"2.1.6 Viewing an Activity","text":"<p>An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities. Once you have successfully navigated to the activity's home page, other than the parameters described in the general section, you will be able to view a few other parameters, which are described below.</p> <p>Under the details section, you can view the parameter titled time ended. Time ended is when an activity is deemed to have been ended by an entity, known as a trigger. The activity no longer exists after its end. Any usage, generation, or invalidation involving an activity precedes the activity's end. An end may refer to a trigger entity that terminated the activity, or to an activity (known as an ender) that generated the trigger.</p>"},{"location":"2_micro_guides/viewing_and_downloading_information/#217-viewing-an-agent","title":"2.1.7 Viewing an Agent","text":"<p>An agent is something that bears some form of responsibility for an activity taking place, for the existence of an entity, or for another agent's activity. Once you have successfully navigated to the agent\u2019s home page, you can view the information mentioned in the general section.</p>"},{"location":"2_micro_guides/viewing_and_downloading_information/#22-downloading-the-information","title":"2.2 Downloading the Information","text":"<p>Once you have navigated successfully to the record's home page, there will be a download option on the left, in a dropdown format.</p> <p>Following are the types of formats in which you may be able to download a record:</p> <p>Note: Not all record types can be downloaded in all formats.</p> Type Description SBOL The Synthetic Biology Open Language (SBOL) has been developed as a standard to support the         specification and exchange of biological design information in synthetic biology. Combine Archive A COMBINE archive is a single file containing the various documents (and in the future, references to documents), necessary for the description of a model and all associated data and procedures. This includes for instance, but not limited to, simulation experiment descriptions, all models needed to run the simulations and associated data files. The archive is encoded using the Open Modeling EXchange format (OMEX). GFF3 The GFF (General Feature Format) format consists of one line per feature, each containing 9 columns of data, plus optional track definition lines. FASTA In bioinformatics and biochemistry, the FASTA format is a text-based format for representing either nucleotide sequences or amino acid (protein) sequences, in which nucleotides or amino acids are represented using single-letter codes. The format also allows for sequence names and comments to precede the sequences. The format originates from the FASTA software package, but has now become a near universal standard in the field of bioinformatics. Image Image is a capture of the VisBOL display at the top of the page. <p>Additional download options may be available via the use of download plugins.</p>"},{"location":"3_advanced/api_documentation/","title":"API Documentation","text":"<p>The API documentation has been published and can be found here. The API documentation describes how software developers can add support to their software to communicate with SynBioHub directly using its RESTful API.</p>"},{"location":"3_advanced/plugins/","title":"Plugins","text":""},{"location":"3_advanced/plugins/#1-what-are-plugins","title":"1. What are Plugins?","text":"<p>Plugins are modular stand-alone additions to SynBioHub. They function in a way that is similar to browser extensions. They can be installed separately from the browser/SynBioHub and provide additional 'custom' functionality to the browser/SynBioHub experience despite having a completely separate code base from the browser/SynBioHub. Though, they seem integrated to the user.</p>"},{"location":"3_advanced/plugins/#11-types-of-plugins","title":"1.1 Types of Plugins","text":"<p>Currently there are three types of plugins available:  1. Submit: Submit plugins are available to use from the submit endpoint. They work by taking in the file that is uploaded in the submit and processing it to return SBOL to the SynBioHub endpoint.</p> <ol> <li> <p>Rendering: Rendering plugins are available on all 'endpoint' pages, for example pages for components, sequences, activities, etc. Rendering plugins return html to be displayed on the page.</p> </li> <li> <p>Download: Download plugins are available on all 'endpoint' pages, for example pages for components, sequences, activities, etc. Download plugins return some kind of file which is downloaded by the user.</p> </li> </ol> <p></p>"},{"location":"3_advanced/plugins/#2-how-do-plugins-work","title":"2. How Do Plugins Work?","text":""},{"location":"3_advanced/plugins/#21-overview","title":"2.1 Overview","text":"<ul> <li> <p>All plugins in actual sense are servers (i.e, a piece of software in a network that is used to provide services such as access to files or the routing of an e-mail to other pieces of software or hardware (clients) in the network). </p> </li> <li> <p>All plugins have at least 3 endpoints: status, evaluate, and run. SynBioHub sends a status request to the status endpoint, if the response is that the plugin is up and running, SynBioHub then sends an evaluate request. The evaluate request tests whether the plugin can handle the data that SynBioHub wishes to send. If the plugin responds positively, SynBioHub then sends data to the run endpoint and uses the final results in the appropriate manner for the plugin type. </p> </li> <li> <p>Note that plugins are asynchronous meaning that the full SynBioHub page can load without having to wait for the plugin to have returned the  results. Subsequently, when the results are returned SynBioHub substitutes the received information for the placeholder it had used when loading the page initially.</p> </li> </ul>"},{"location":"3_advanced/plugins/#22-installation","title":"2.2 Installation","text":"<p>As the plugins are standalone servers &amp; they don't have to be used in conjunction with SynBioHub. Though plugins have been developed to interface directly with SynBioHub, it is possible to install them and then interact with them via the API (from the command line or via a GUI interface such as Postman). Different methods of installation are discussed below. For those who're less-experienced with Programming, it is suggested that you should be using plugins with SynBioHub.</p>"},{"location":"3_advanced/plugins/#221-using-synbiohub","title":"2.2.1 Using SynBioHub","text":"<p>A detailed explaination on how to install SynBioHub on various operating systems is written here A full list of plugin file names and their descriptions can be found here.</p>"},{"location":"3_advanced/plugins/#2211-common-problems","title":"2.2.1.1 Common Problems","text":"<p>The most common problems that you may face while executing the commands mentioned above are as follows:-</p> <ol> <li> <p>The plugins might try to use ports that are already in use. If upon running the above commands and then using <code>docker ps</code> not all of the   'images' that you expect are present then try the following command: <code>docker ps \u2013a</code>.    If you now see the image(s) you were missing with the status 'created' it suggests that they have a port clash. If this is the case you can go in the docker-compose file for the appropriate plugin and change the port number (the first four digit number under \u201cports\u201d). Then try running step 4 of the above commands again.</p> </li> <li> <p>If you've locally installed SynBioHub using the above commands it might cause issues in some plugins, that will receive urls that look like: <code>http://localhost:7777/xxxxxxx</code>. Localhost in docker containers refers to the container itself. The problem is explained further here. On Linux this problem is solvable and the solution cab be found on stack overflow and on docker.</p> </li> </ol>"},{"location":"3_advanced/plugins/#2212-adding-plugins-to-the-admin-panel","title":"2.2.1.2 Adding Plugins to the Admin Panel","text":"<p>After getting the plugins up and running you still have to add them to the admin panel in SynBioHub. Navigate to the plugin section of the admin panel. Choose the appropriate section i.e, rendering, submit, or download and give the plugin a descriptive name. Then in the url section there are several different options depending on exactly how the plugin was brought up:</p> <ul> <li> <p>If plugins were brought up using docker compose: Use <code>http://localhost:&lt;port&gt;/</code> e.g. <code>http://localhost:8093/</code> for the Excel Submit Library plugin Or use the following alternative: <code>http://&lt;docker container name&gt;:5000/</code> e.g. <code>http://synbiohub-docker_pluginSubmitExcelLibrary_1:5000/</code> for the Excel Submit Library plugin.</p> </li> <li> <p>Another alternative that is not recommended but still can be used is to enter <code>http://&lt;synbiohub docker network ip address&gt;:&lt;port&gt; /</code> e.g. <code>http://172.18.0.1:8093/</code> for the Excel Submit Library plugin when the synbiohub-docker network is \"172.18.0.1\".</p> </li> <li> <p>Find out the synbiohub-docker network ip by typing into the terminal the following command <code>docker inspect synbiohub-docker_default</code> and the address following 'Gateway' is the ip address you want. Note that this will change every time you run the docker compose command.</p> </li> <li> <p>If in the case that plugins are hosted elsewhere on a public server then simply use the url to access them e.g.: https://seqviz.synbiohub.org/ for the seqviz plugin (this method is also possible if you have named and exposed internal ports from your docker compose (this requires caddy).</p> </li> </ul>"},{"location":"3_advanced/plugins/#222-using-a-standalone-docker-container","title":"2.2.2 Using a Standalone Docker Container","text":"<p>If you just want to bring up the plugin as a stand-alone Docker container you can simply pull the image from docker hub. </p> <ul> <li> <p>First make sure you have docker-desktop installed for your OS. Then it should be open and running with admininstrative permissions. </p> </li> <li> <p>Then in the terminal run the following command <code>docker run --publish &lt;publish port&gt;:5000 --detach --name &lt;nickname of your choice&gt; synbiohub/&lt;docker image name&gt;</code>.</p> </li> </ul> <p>e.g: <code>docker run --publish 8093:5000 --detach --name submit-plug synbiohub/plugin-submit-excel-library:snapshot</code> for the excel library submit plugin. It is suggested that the same publish ports are used when using docker compose. The list of those ports can be found here.</p>"},{"location":"3_advanced/plugins/#2221-common-problems","title":"2.2.2.1 Common Problems","text":"<p>The most common problems that you may face while executing the commands mentioned above are as follows:-</p> <ol> <li>Localhost:-  If the plugin is being run as a docker container that localhost may cause problems as localhost is considered within the container and won't point to the localhost on your computer. The problem is explained further here. On Linux this problem is solvable and solution can be found on stack-overflow.</li> </ol>"},{"location":"3_advanced/plugins/#223-using-standalone-methods","title":"2.2.3 Using Standalone Methods","text":"<p>Plugins can also be run without using docker. How this is done depends on the programming language and packages used to create the server. We've provided the documentation for two of the most common server choices, i.e python using flask and javascript using express.</p>"},{"location":"3_advanced/plugins/#2231-python-flask-servers","title":"2.2.3.1 Python Flask Servers","text":"<p>NOTE: You might have to add pandas to the requirements if you are running the plugins as standalone (this is not needed if you are running the plugin via docker since, we use a base image which contains pandas pre-installed as it is extremely difficult and highly buggy to install via docker on a python base image).</p>"},{"location":"3_advanced/plugins/#22311-for-anaconda","title":"2.2.3.1.1 For Anaconda","text":"<ol> <li>Open the terminal</li> <li>Clone the repository for the plugin (For example:-  <code>git clone https://github.com/SynBioHub/Plugin-Submit-Excel-Library.git</code>)</li> <li>Change directory into the repository folder using the command <code>cd &lt;repo-name&gt;</code>(For repo-name enter your local repository name). Now, open the anaconda prompt and carry out the rest of the commands in the anaconda prompt.</li> <li>Enter the following commmand: <code>conda install --file requirements.txt</code>.</li> <li>Then, enter the following command: <code>set FLASK_APP=app.py</code></li> <li>OPTIONAL command:  <code>set FLASK_ENV=development</code></li> <li>Finally, enter <code>flask run --port 5000</code> (the -- port 5000 is optional instead of 5000 there any port numbercan be entered)</li> <li>The server should then be accessible at <code>http://localhost:5000/status</code>. Hence, open your browser an the enter <code>http://localhost:5000/status</code>.</li> </ol>"},{"location":"3_advanced/plugins/#22312-for-python","title":"2.2.3.1.2 For Python","text":""},{"location":"3_advanced/plugins/#223121-mac-oslinux","title":"2.2.3.1.2.1 Mac OS/Linux","text":"<ol> <li>Open the terminal.</li> <li>Clone the repository using the command <code>git clone &lt;Repo-Link&gt;</code> (For Example:<code>git clone https://github.com/SynBioHub/Plugin-Submit-ExcelLibrary.git</code>)</li> <li>Change directory into the repository folder using the command <code>cd &lt;repo-name&gt;</code>(For repo-name enter your local repository name).</li> <li>Enter the following command: <code>pip install -r requirements.txt</code></li> <li>Then, enter the following command: <code>export FLASK_APP=app</code></li> <li>Finally to start flask, enter the following command: <code>flask run</code></li> <li>The server should then be accessible at <code>http://localhost:5000/status</code>. Hence open your browser and enter <code>http://localhost:5000/status</code></li> </ol>"},{"location":"3_advanced/plugins/#223122-windows-os","title":"2.2.3.1.2.2 Windows OS","text":"<ol> <li>Open the terminal</li> <li>Clone the repository using <code>git clone &lt;Repo-link&gt;</code> (For Example <code>git clone https://github.com/SynBioHub/Plugin-Submit-Excel-Library.git</code>)</li> <li>Change directory into the repository folder using the command <code>cd &lt;repo-name&gt;</code>(For repo-name enter your local repository name).</li> <li>Enter the following command: <code>pip install -r requirements.txt</code></li> <li> <p>In the Powershell, enter the follwing command: <code>$env:FLASK_APP = \"app\"</code> or in the command window: <code>set FLASK_APP=app</code></p> </li> <li> <p>Finally to run flask, enter the following commmand: <code>flask run</code></p> </li> <li>The server should then be accessible at <code>http://localhost:5000/status</code>. Hence open your browser and enter <code>http://localhost:5000/status</code>.</li> </ol> <p>For more information see this.</p>"},{"location":"3_advanced/plugins/#2232-javascript-nodejs-with-express-servers","title":"2.2.3.2 Javascript Node.js with Express Servers","text":"<p>The following steps should be followed:-</p> <ol> <li>Open the terminal.</li> <li>Clone the repository using <code>git clone &lt;Repo-Link&gt;</code>(For example <code>git clone https://github.com/SynBioHub/ Plugin-Submit-Test-js.git</code>)</li> <li>Change directory into the repository folder using the command <code>cd &lt;repo-name&gt;</code>(For repo-name enter your local repository name).</li> <li>Enter <code>npm install</code> (This installs all the requirements that requires npm to be installed onto your system: https://nodejs.org/en/download/).</li> <li>Enter <code>node app.js</code> The server should then be accessible at <code>http://localhost:5000/status</code>. Hence open your browser and enter <code>http://localhost:5000/status</code>.</li> </ol>"},{"location":"3_advanced/plugins/#3-writing-plugins","title":"3. Writing Plugins","text":"<p>The following section explains everything you need to know about the syntax of writing plugins.</p>"},{"location":"3_advanced/plugins/#31-naming-convention","title":"3.1 Naming Convention","text":"<p>For github repositories, the naming convention for plugin repositories is: </p> <p><code>Plugin-&lt;&lt;Type&gt;&gt;-&lt;&lt;Description&gt;&gt;-&lt;&lt;Test&gt;&gt;-&lt;&lt;language&gt;&gt;</code></p> <p>Note: The words are separated by a dash (-) and every word but the program language is Proper case (Initial letter is capitalized and the further letters aren't).</p> <p>For Type it is: Submit, Rendering, Download</p> <p>For Test: add the Test to the name if it is a framework plugin simply showing off how to write a particular plugin type</p> <p>For language:</p> <p>Python: Nothing is to be added here.</p> <p>Javascript: Add \"js\" in place of language.</p> <p>Examples: * Plugin-Submit-Excel-Library * Plugin-Download-Test-js * Plugin-Visual-Component-Use The same name is then used for both the docker-compose and the docker image name:</p> <p>Example: Repository: Plugin-Visual-Component-Use</p> <p>Docker Compose File: docker-compose.pluginVisualComponentUse.yml </p> <p>(Note that the plugin is lowercase and then the rest of the words are capitalized but there aren't any spaces or dashes).</p> <p>Docker Image Name: synbiohub/plugin-visual-component-use:snapshot (Note that there are no capitals in the docker image name).</p>"},{"location":"3_advanced/plugins/#32-basic-structure","title":"3.2 Basic Structure","text":"<p>In this section what the server receives and the format of its response is defined. Below is a section about writing a server/plugin by simply copying and editing the example type.</p>"},{"location":"3_advanced/plugins/#321-rendering","title":"3.2.1 Rendering","text":""},{"location":"3_advanced/plugins/#3211-status","title":"3.2.1.1 Status","text":""},{"location":"3_advanced/plugins/#receives","title":"Receives","text":"<p>Nothing is received (It is just a simple get request).</p>"},{"location":"3_advanced/plugins/#returns","title":"Returns","text":"<p>If it is up and running, then it should return a 200 status to a get request.</p>"},{"location":"3_advanced/plugins/#3212-evaluate","title":"3.2.1.2 Evaluate","text":""},{"location":"3_advanced/plugins/#receives_1","title":"Receives","text":"<p>type: The RDF type of the top-level object Common RDF types are:</p> <p>'Activity', 'Agent', 'Association', 'Attachment', 'Collection', 'CombinatorialDerivation', 'Component', 'ComponentDefinition', 'Cut', 'Experiment', 'ExperimentalData', 'FunctionalComponent','GenericLocation', 'Implementation', 'Interaction', 'Location', 'MapsTo', 'Measure', 'Model', 'Module', 'ModuleDefinition', 'Participation', 'Plan', 'Range', 'Sequence', 'SequenceAnnotation', 'SequenceConstraint', 'Usage', 'VariableComponent'</p> <ul> <li>Example 1:     {'type': 'Component'}</li> </ul>"},{"location":"3_advanced/plugins/#returns_1","title":"Returns","text":"<p>Return a status of 200 if the type is acceptable and a 4xx status if it isn't.</p>"},{"location":"3_advanced/plugins/#3213-run","title":"3.2.1.3 Run","text":""},{"location":"3_advanced/plugins/#receives_2","title":"Receives","text":"<ol> <li>complete_sbol: The single-use URL for the complete object to operate on</li> <li>shallow_sbol: The single-use URL for a summarized or truncated view of the object</li> <li>genbank: The single-use URL for the Genbank of the object (Note: This will be a blank website for all types other than Component)</li> <li>top_level: The top-level URL of the SBOL object</li> <li>instanceUrl: The top-level URL of the synbiohub instance</li> <li>size: A number representing an estimate of the size of the object, probably triple count</li> <li>type: The RDF type of the top-level object</li> </ol> <p>Common RDF types are: 'Activity', 'Agent', 'Association', 'Attachment', 'Collection', 'CombinatorialDerivation', 'Component', 'ComponentDefinition', 'Cut', 'Experiment', 'ExperimentalData', 'FunctionalComponent','GenericLocation', 'Implementation', 'Interaction', 'Location', 'MapsTo', 'Measure', 'Model', 'Module', 'ModuleDefinition', 'Participation', 'Plan', 'Range', 'Sequence', 'SequenceAnnotation', 'SequenceConstraint', 'Usage', 'VariableComponent'</p> <ul> <li> <p>Example 1: {'complete_sbol': 'https://dev.synbiohub.org/public/igem/BBa_E0040/1/sbol',  'shallow_sbol': 'https://dev.synbiohub.org/public/igem/BBa_E0040/1/sbolnr',  'genbank': 'https://dev.synbiohub.org/public/igem/BBa_E0040/1/gb',  'top_level': 'https://synbiohub.org/public/igem/BBa_E0040/1',  'size': 5,  'type': 'Component',  'instanceUrl': 'https://dev.synbiohub.org/'}</p> </li> <li> <p>Example 2: {'complete_sbol': 'https://synbiohub.org/public/igem/BBa_E0240_sequence/1/sbol',  'shallow_sbol': 'https://synbiohub.org/public/igem/BBa_E0240_sequence/1/sbolnr',  'genbank': 'https://synbiohub.org/public/igem/BBa_E0240_sequence/1/gb',  'top_level': 'https://synbiohub.org/public/igem/BBa_E0240_sequence/1',  'size': 2,  'type': 'Sequence',  'instanceUrl': 'https://synbiohub.org/'}</p> </li> </ul>"},{"location":"3_advanced/plugins/#returns_2","title":"Returns","text":"<p>The plugin should respond with an HTML page to be rendered in-frame on the corresponding SynBioHub page.</p>"},{"location":"3_advanced/plugins/#3214-examples","title":"3.2.1.4 Examples","text":"<p>Sequence View Plugin is a visualisation plugin engine for SynBioHub to enhance the functional annotations of DNA sequence which are coordinated with the SBOL Visual standard. The instructions to install these plugins can be found here.</p>"},{"location":"3_advanced/plugins/#python","title":"Python","text":"<p>A full example of a rendering plugin can be found at: <code>https://github.com/SynBioHub/Plugin-Visual-Test</code></p>"},{"location":"3_advanced/plugins/#javascript","title":"Javascript","text":"<p>A full example of a rendering plugin can be found at: <code>https://github.com/SynBioHub/Plugin-Visual-Test-js</code></p>"},{"location":"3_advanced/plugins/#33-submit","title":"3.3 Submit","text":""},{"location":"3_advanced/plugins/#331-status","title":"3.3.1 Status","text":""},{"location":"3_advanced/plugins/#receives_3","title":"Receives","text":"<p>Nothing is received (It is just a simple get request)</p>"},{"location":"3_advanced/plugins/#returns_3","title":"Returns","text":"<p>If it is up and running it should return a 200 status to a get request</p>"},{"location":"3_advanced/plugins/#332-evaluate","title":"3.3.2 Evaluate","text":""},{"location":"3_advanced/plugins/#receives_4","title":"Receives","text":"<p>{'manifest'</p> <pre><code>{'files'\n\n   [List of dictionaries (one for every file). *Each dictionary has the keys*:\n\n   'url' the single-use URL for the file submitted\n\n   'filename' the encrypted file name (with correct extension)\n\n   'type' the mime of the file (see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types)\n</code></pre> <ul> <li>Example 1: {\"manifest\": {\"files\":[</li> </ul> <p>{\"url\": \"http://synbiohub.org/expose/b41e63d6-10f4-4cac-b1c8-285f71156b56\", \"filename\": \"asdfasdf.xls\", \"type\": \"application/vnd.ms-excel\"},</p> <p>{\"url\": \"http://synbiohub.org/expose/jkl9d8s7ufjqhoer8u709s\", \"filename\": \"file_name1.dna\", \"type\": \"application/xml\"},</p> <p>{\"url\": \"http://synbiohub.org/expose/basdf-11230948f4-12344cac\", \"filename\": \"file_name2.xml\", \"type\": \"application/xml\"},</p> <p>{\"url\": \"http://synbiohub.org/expose/09uj2k3j0\", \"filename\": \"file_name3.xml\", \"type\": \"application/xml\"},</p> <p>{\"url\": \"http://synbiohub.org/expose/asdfasdf56\", \"filename\": \"file_name4.xml\", \"type\": \"application/xml\"}]}}</p> <ul> <li>Example 2: {\"manifest\": </li> </ul> <p>{\"files\":[</p> <p>{\"url\": \"http://synbiohub.org/expose/93c25d15-9fe2-4862-b602-ddbdac2c4333\", \"filename\": \"mbr5wW6CIseoq-0Y4MkM8DTM.xml\", \"type\": \"application/xml\"}]}}</p>"},{"location":"3_advanced/plugins/#returns_4","title":"Returns","text":"<p>{'manifest':[ Dictionaries each of which contains 'filename': the encrypted file name (with correct extension) that matches the original filename sent in the manifest from synbiohub 'requirement': a number which indicates whether or not the file can be used the numbers mean: 2-file will be converted to sbol, 1-file will be used to convert other files to sbol, 0-file cannot be handled/is not useful * Example 1: {\"manifest\": [         {             \"filename\": \" asdfasdf.xls \",             \"requirement\": 2         },         {             \"filename\": \"file_name1.dna\",             \"requirement\": 1         },         {             \"filename\": \"file_name2.xml\",             \"requirement\": 0         },         {             \"filename\": \"file_name3.xml\",             \"requirement\": 0         },         {             \"filename\": \"file_name4.xml\",             \"requirement\": 0         }     ] }</p> <ul> <li>Example 2: {     \"manifest\": [         {             \"filename\": \" mbr5wW6CIseoq-0Y4MkM8DTM.xml \",             \"requirement\": 2         }     ] }</li> </ul>"},{"location":"3_advanced/plugins/#333-run","title":"3.3.3 Run","text":""},{"location":"3_advanced/plugins/#recieves","title":"Recieves","text":"<p>A dictionary with entries: {'manifest'     {'files'</p> <pre><code>  [List of dictionaries (one for every file). Each dictionary has the keys:\n\n   'url' the single-use URL for the file submitted\n\n   'filename' the encrypted file name (with correct extension)\n\n   'type' the mime of the file (see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types)\n\n   'instanceUrl'  the top-level URL of the synbiohub instance\n</code></pre> <ul> <li> <p>Example 1: {'manifest': </p> <p>{'files': </p> <p>[{'filename': '0WaHXIKZD10gRGdC8U7weHWC.html', </p> <p>'type': 'text/html', </p> <p>'url': 'https://dev.synbiohub.org/expose/e9665a54-dbdd-485e-a20b-574e46412fc4'}]}, </p> <p>'instanceUrl': 'https://dev.synbiohub.org/'}</p> </li> <li> <p>Example 2: {\"manifest\": {\"files\":[{\"url\": \"https://synbiohub.org/expose/kl98ahnj0fa9u03945r\", </p> <pre><code>        \"filename\": \"oijwpjrpokk98um098m.xlsx\",\n\n        \"type\": \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"},\n\n     {\"url\": \"https://synbiohub.org/98ja0s98dufjml.dna\",\n\n        \"filename\": \"as9d8j0asd9j23fc.dna\",\n\n        \"type\": \" application/xml \"}]},\n\n        \"instanceUrl\": \"http://localhost:7777/\"}\n</code></pre> </li> </ul>"},{"location":"3_advanced/plugins/#returns_5","title":"Returns","text":"<p>A zip file which contains the generated SBOL files and a file called manifest.json which contains a json response manifest of the form: {'results'</p> <p>[List of dictionaries (one for every file). Each dictionary has the keys:</p> <p>'filename' name of the file within the zipfile </p> <p>'sources' a list of filenames received from synbiohub that were used to generate the file</p> <ul> <li> <p>Example 1: {'results': [{'filename': '0WaHXIKZD10gRGdC8U7weHWC.html.converted', 'sources': ['0WaHXIKZD10gRGdC8U7weHWC.html ']}]}</p> </li> <li> <p>Example 2: {'results': </p> </li> </ul> <p>[{'filename': oijwpjrpokk98um098m.xlsx.converted',</p> <p>'sources': ['oijwpjrpokk98um098m.xlsx']}, </p> <p>{'filename': ' as9d8j0asd9j23fc.dna.converted', </p> <p>'sources': [' as9d8j0asd9j23fc.dna']}]}</p> <p>NOTE: list of sources could contain more than one file (if any of the files in the evaluate endpoint were flagged as 1 they might be added to the sources for one of the other file conversions)</p>"},{"location":"3_advanced/plugins/#334-examples","title":"3.3.4 Examples","text":"<p>We've created a plugin, which accepts a spreadsheet as input and converts it into SBOL which can be processed by SynBioHub. This could simplify the process of data curation for publication by bridging the gap between those that perform the experiments and those that write about them from the very beginning. The instructions to install these plugins can be found here.</p>"},{"location":"3_advanced/plugins/#python_1","title":"Python","text":"<p>A full example of a submit plugin can be found at: https://github.com/SynBioHub/Plugin-Submit-Test</p>"},{"location":"3_advanced/plugins/#javascript_1","title":"Javascript","text":"<p>A full example of a submit plugin can be found at: https://github.com/SynBioHub/Plugin-Submit-Test-js</p>"},{"location":"3_advanced/plugins/#34-download","title":"3.4 Download","text":""},{"location":"3_advanced/plugins/#341-status","title":"3.4.1 Status","text":""},{"location":"3_advanced/plugins/#recieves_1","title":"Recieves","text":"<p>Nothing is received (it is a simple get request)</p>"},{"location":"3_advanced/plugins/#returns_6","title":"Returns","text":"<p>If it is up and running it should return a 200 status to a get request </p>"},{"location":"3_advanced/plugins/#342-evaluate","title":"3.4.2 Evaluate","text":""},{"location":"3_advanced/plugins/#recieves_2","title":"Recieves","text":"<p>type: The RDF type of the top-level object</p> <p>Common RDF types are: 'Activity', 'Agent', 'Association', 'Attachment', 'Collection', 'CombinatorialDerivation', 'Component', 'ComponentDefinition', 'Cut', 'Experiment', 'ExperimentalData', 'FunctionalComponent','GenericLocation', 'Implementation', 'Interaction', 'Location', 'MapsTo', 'Measure', 'Model', 'Module', 'ModuleDefinition', 'Participation', 'Plan', 'Range', 'Sequence', 'SequenceAnnotation', 'SequenceConstraint', 'Usage', 'VariableComponent'</p> <ul> <li>Example 1: {'type': 'Component'}</li> </ul>"},{"location":"3_advanced/plugins/#returns_7","title":"Returns","text":"<p>Return a status of 200 if the type is acceptable and a 4xx status if it isn't</p>"},{"location":"3_advanced/plugins/#343-run","title":"3.4.3 Run","text":""},{"location":"3_advanced/plugins/#recieves_3","title":"Recieves","text":"<p>complete_sbol: the single-use URL for the complete object to operate on</p> <p>shallow_sbol: the single-use URL for a summarized or truncated view of the object</p> <p>genbank: the single-use URL for the Genbank of the object (Note this will be a blank website for all types other than Component)</p> <p>top_level: the top-level URL of the SBOL object</p> <p>instanceUrl: the top-level URL of the synbiohub instance</p> <p>size: a number representing an estimate of the size of the object, probably triple count</p> <p>type: The RDF type of the top-level object</p> <p>Common RDF types are:</p> <p>'Activity', 'Agent', 'Association', 'Attachment', 'Collection', 'CombinatorialDerivation', 'Component', 'ComponentDefinition', 'Cut', 'Experiment', 'ExperimentalData', 'FunctionalComponent','GenericLocation', 'Implementation', 'Interaction', 'Location', 'MapsTo', 'Measure', 'Model', 'Module', 'ModuleDefinition', 'Participation', 'Plan', 'Range', 'Sequence', 'SequenceAnnotation', 'SequenceConstraint', 'Usage', 'VariableComponent'</p> <ul> <li> <p>Example 1: {'complete_sbol': 'https://dev.synbiohub.org/public/igem/BBa_E0240/1/sbol', 'shallow_sbol': 'https://dev.synbiohub.org/public/igem/BBa_E0240/1/sbolnr', 'genbank': 'https://dev.synbiohub.org/public/igem/BBa_E0240/1/gb', 'top_level': 'https://synbiohub.org/public/igem/BBa_E0240/1', 'size': 39, 'type': 'Component', 'instanceUrl': 'https://dev.synbiohub.org/'}</p> </li> <li> <p>Example 2: {'complete_sbol': 'https:// synbiohub.org/public/igem/BBa_E0240/1/sbol', 'shallow_sbol': 'https:// synbiohub.org/public/igem/BBa_E0240/1/sbolnr', 'genbank': 'https:// synbiohub.org/public/igem/BBa_E0240/1/gb', 'top_level': 'https://synbiohub.org/public/igem/BBa_E0240/1', 'size': 39, 'type': 'Component', 'instanceUrl': 'https:// synbiohub.org/' }</p> </li> </ul>"},{"location":"3_advanced/plugins/#returns_8","title":"Returns","text":"<p>The plugin should respond with an HTTP request and file attachment which represents the object.</p>"},{"location":"3_advanced/plugins/#344-examples","title":"3.4.4 Examples","text":"<p>To view certain examples regarding download plugins, click here</p>"},{"location":"3_advanced/plugins/#python_2","title":"Python","text":"<p>A full example of a download plugin can be found here.</p>"},{"location":"3_advanced/plugins/#javascript_2","title":"Javascript","text":"<p>A full example of a download plugin can be found here.</p>"},{"location":"3_advanced/plugins/#35-writing-an-app-by-copying-the-examples","title":"3.5 Writing an App by Copying the Examples","text":"<ol> <li>Copy the relevant repository (make sure it includes the docker actions to automatically build)</li> <li>Change the docker image name in release.yml in line 17 and 24</li> <li>Ensure that the repository has the docker username and docker password as secrets in the repository (will happen automatically if you are creating a repository in the synbiohub project)</li> <li>Update the license.</li> <li>Change the readme.md file</li> <li>Edit the sections of the code in app.py that say edit within here (should be a section under the evaluate endpoint and under the run endpoint). Can import further functions at the top of the file and do most of the code writing in a second file to leave the structure between plugins as similar as possible</li> <li>Create a new requirements.txt or packages.json to match what you now have (packages.json should happen mostly automatically). For requirements.txt there are several methods:</li> </ol>"},{"location":"3_advanced/plugins/#4-using-a-virtual-environment","title":"4. Using a Virtual Environment","text":""},{"location":"3_advanced/plugins/#41-for-anaconda","title":"4.1 For Anaconda","text":"<p>The following steps should be followed:- 1. <code>pip3 install virtualenv</code> 2. <code>python3 -m venv &lt;myenvname&gt;</code> 3. <code>conda list -e &gt; requirements.txt</code></p>"},{"location":"3_advanced/plugins/#5-without-a-virtual-environment","title":"5. Without a Virtual Environment","text":"<p>Try the pipreqs package (used from anaconda prompt if using anaconda)</p> <p>Stackoverflow link This provides further suggestions and ideas.</p>"},{"location":"3_advanced/plugins/#6-best-practices","title":"6. Best practices","text":"<ol> <li>Always write files to temporary files or directories (prevents overwriting if you have multiple calls to the same plugin concurrently)</li> <li>Never use \u201cfile\u201d as a variable name in python (it causes deeper issues)</li> <li>Make code modular and comment well</li> <li>Adhere to standards and best practices of the language you write in</li> </ol>"},{"location":"3_advanced/plugins/#7-advanced-possibilities","title":"7. Advanced Possibilities","text":"<ol> <li>It is possible to use the url to pass parameters to the plugin see (https://github.com/SynBioHub/Plugin-Visual-Component-Use)</li> <li>It is possible to have files served from the plugin (https://github.com/SynBioHub/Plugin-Visual-Serve-Test and https://github.com/SynBioHub/Plugin-Visual-Serve-Test-js)</li> </ol>"},{"location":"3_advanced/plugins/#8-dockerising","title":"8. Dockerising","text":""},{"location":"3_advanced/plugins/#81-simple-overview-of-docker","title":"8.1 Simple Overview of Docker","text":"<ul> <li>Source code is used in docker file which is used to build an image which can be pushed to docker hub (LIKE GITHUB). Image (can have been pulled from dockerhub) can be run on its own or with others like autoheal in a docker compose file.</li> <li>When an image/docker compose file is run it creates a container.</li> <li>Caddy (or other webserver like engineX, httpd, apache) listens to https port (443) and converts https to http and routes it to port on which the container is listening which it container thinks is port 80 (http port - generally the default over https, you could map out from a different port depending on what the webserver inside the container thinks it is listening too e.g. synbiohub thinks it listens to port 7777). Container maps its port to host and caddy forwards from 443 to the host port that the container is listening on.</li> </ul>"},{"location":"3_advanced/plugins/#82-idea-of-architecture","title":"8.2  Idea of Architecture:","text":"<ul> <li>caddy is a webserver which reroutes requests to containers containers may or may not contain images which are also webservers (dockercompse files describe a set of containers which also may or may not contain webservers)</li> <li>High ports are over 1024 and 'non-reserved' ports. ssh is to 22 (generally).</li> <li>Key points understand that docker has: images, containers, volumes, and networks (especially important to understand what sticks around and what doesn't when you try and refresh the containers a very useful command is prune: https://takacsmark.com/docker-prune/</li> </ul>"},{"location":"3_advanced/plugins/#83-steps-for-dockerising-a-plugin","title":"8.3 Steps for Dockerising a Plugin","text":"<ul> <li>After having installed docker desktop and making sure it is up and running using an administrator account. Note that the docker website has a tutorial with mor information.</li> </ul> <p>How to dockerise plugin code (things in &lt;&gt; signs should be replaced with your specific variable names) 1. Run command window as admin. 2. git clone the github repository containing everything into a local directory:  <code>git clone &lt;github url&gt;</code>. 3. cd into directory that was just cloned: <code>cd &lt;directory name&gt;</code> 4. create a file named <code>.dockerignore</code> with the contents \"Dockerfile\": <code>echo Dockerfile&gt;.dockerignore</code>. 5. create a file named \"Dockerfile\": <code>echo &gt;Dockerfile</code> 6. Edit the Dockerfile to contain the appropriate text (I use notepad++ for this - note for python plugins a requirements.txt is required and for js plugins a package.json file is required) 7. Build your docker image: <code>docker build --tag synbiohub/&lt;descriptive name&gt;:snapshot</code>. (Note the full stop at the end of the command!) 8. Run the docker image: <code>docker run --publish &lt;port number&gt;:5000 --detach --name &lt;short name&gt; synbiohub/&lt;descriptive name&gt;:snapshot</code> 9. Check the run was sucessful: <code>docker ps</code>,  if not shown there check: <code>docker ps -all</code>  and then check the logs: <code>docker logs &lt;short name&gt;</code> 10. Based on error logs fix the errors, then remove the current container: <code>docker rm &lt;short name&gt;</code> and repeat steps 7 and 8. 11. If docker ps shows your plugin running then navigate to localhost:/status. Can also test the run end point using a program like postman to submit a query and look at the response. 12. If all is well stop the docker container:  <code>docker stop &lt;short name&gt;</code> and remove it <code>docker rm &lt;short name&gt;</code> 13. Upload the newly added files (Dockerfile and .dockerignore) to the github repo 14. Add github action to push image to dockerhub (called <code>release.yml</code> in my plugins) 15. Under <code>setting&gt;secrets</code> add secrets containing the <code>username</code> and <code>password</code> 16. Update the readme and wait for the new image to be pushed to docker hub (you will see a green check next to commit when this has happened) 17. check the uploaded image works by downloading and running it: <code>docker run --publish 8080:5000 --detach --name &lt;short name&gt; synbiohub/&lt;descriptive name&gt;:snapshot</code> and repeating steps 9-12.</p>"},{"location":"3_advanced/plugins/#9-plugins-table","title":"9. Plugins-Table","text":"<p>A table of currently available plugins can be found here.</p>"},{"location":"4_get_involved/development_environment/","title":"Development Environment Setup","text":"<p>This guide covers setting up a development environment for contributing to SynBioHub. This is different from the installation guide which focuses on deploying SynBioHub for production use.</p>"},{"location":"4_get_involved/development_environment/#prerequisites","title":"Prerequisites","text":"<p>Before setting up the development environment, ensure you have the following installed:</p> <ul> <li>Git: For version control and cloning repositories</li> <li>Docker and Docker Compose: For running services like Virtuoso database</li> <li>Visual Studio Code (recommended): With extensions for TypeScript, Python, and Docker</li> </ul>"},{"location":"4_get_involved/development_environment/#installing-prerequisites","title":"Installing Prerequisites","text":"<ol> <li>Before trying to run SynBioHub2 locally on your PC, make sure that you have Docker installed. Be sure to also install Git so that you can track your changes.</li> </ol>"},{"location":"4_get_involved/development_environment/#repository-setup","title":"Repository Setup","text":""},{"location":"4_get_involved/development_environment/#clone-the-main-repositories","title":"Clone the Main Repositories","text":"<p>SynBioHub consists of multiple repositories. For development, you'll need:</p> <pre><code># Create a workspace directory\nmkdir synbiohub-dev\ncd synbiohub-dev\n\n# Clone the main repositories\ngit clone https://github.com/SynBioHub/synbiohub3.git  # Frontend\ngit clone https://github.com/SynBioHub/synbiohub.git    # Backend\ngit clone -b devtools https://github.com/SynBioHub/synbiohub2-docker.git # Docker Compose Setup (devtools branch)\n</code></pre>"},{"location":"4_get_involved/development_environment/#launching","title":"Launching","text":"<pre><code>cd synbiohub2-docker\n\n# Start everything with build from source\ndocker compose -f docker-compose-dev.yml up\n</code></pre>"},{"location":"4_get_involved/development_environment/#environment-configuration","title":"Environment Configuration","text":"<p>Within the <code>docker-compose-dev.yml</code> file there are some environment variables. These are configured for running the code on the same device you are accessing it from, ie localhost. If that is not true, ie cloudflare tunnels, then you will need to update the backend url.</p>"},{"location":"4_get_involved/development_environment/#development-workflow","title":"Development Workflow","text":""},{"location":"4_get_involved/development_environment/#code-changes","title":"Code Changes","text":""},{"location":"4_get_involved/development_environment/#frontend-changes","title":"Frontend Changes:","text":"<ul> <li>Edit files in <code>synbiohub3/src/</code></li> <li>Changes are automatically reloaded</li> <li>Check browser console for errors</li> </ul>"},{"location":"4_get_involved/development_environment/#backend-changes","title":"Backend Changes:","text":"<ul> <li>Edit files in <code>synbiohub/</code></li> <li>Restart the backend server for code changes:<ul> <li>Stop the backend server: <code>docker compose -f docker-compose-dev.yml down</code></li> <li>Start the backend server: <code>docker compose -f docker-compose-dev.yml up</code></li> </ul> </li> <li>Check backend server logs for errors or browse to localhost:7777</li> </ul>"},{"location":"4_get_involved/development_environment/#testing","title":"Testing","text":"<p>Tests are currently under development for the frontend. Backend tests are handled by github actions on commit.</p>"},{"location":"4_get_involved/development_environment/#adding-new-features","title":"Adding New Features","text":"<ol> <li>Create a feature branch: <code>git checkout -b feature/new-feature</code></li> <li>Make changes following the existing code patterns</li> <li>Write tests for new functionality</li> </ol>"},{"location":"4_get_involved/development_environment/#plugin-development","title":"Plugin Development","text":"<p>For developing plugins, see the plugins documentation.</p>"},{"location":"4_get_involved/development_environment/#getting-help","title":"Getting Help","text":"<ul> <li>Check existing GitHub issues</li> <li>Join the developer mailing list</li> <li>Review the API documentation</li> </ul>"},{"location":"4_get_involved/development_environment/#next-steps","title":"Next Steps","text":"<p>Once your development environment is set up:</p> <ol> <li>Explore the codebase structure</li> <li>Review existing issues for contribution opportunities</li> </ol> <p>Happy coding! \ud83c\udf89</p>"},{"location":"4_get_involved/mailing_lists/","title":"Mailing Lists","text":"<p>If you are a SynBioHub developer with a question about SynBioHub or plugin development, please join the synbiohub-dev mailing list and post your question there.</p> <p>If you are a SynBioHub user with a question about how to use SynBioHub, please join the synbiohub-users mailing list and post your question there.</p> <p>If you have a suggestion for a new SynBioHub plugin, please make your suggestion here.</p>"},{"location":"4_get_involved/report_an_issue/","title":"Report an Issue","text":"<p>If you want to report an error, please see the respective pages.</p> <p>Note: For enhancements, there are contact details in the \"questions and contact\" section.</p> <ul> <li>GUI documentation (This Site)</li> <li>SynBioHub Frontend</li> <li>API documentation</li> <li>SynBioHub Backend</li> <li>SynBioHub plugins: Please log your issue in the appropriate issue tracker for the plugin found in the table below.</li> </ul>"},{"location":"5_background/about_synbiohub/","title":"About SynBioHub","text":"<p>SynBioHub2 is made of two intertwined projects:</p> <ol> <li>Provides computational access for software and data integration, and a graphical user interface that enables users to search for, store, share, and publish genetic designs in a web application.</li> <li>A public instance of the aforementioned software project at dev2.synbiohub.org, allowing users to upload and share designs.</li> </ol> <p>The SynBioHub2 repository is an open-source software project that facilitates the sharing of information about engineered biological systems. SynBioHub2 provides computational access for software and data integration, and a graphical user interface that enables users to search for and share designs in a Web browser. By connecting to relevant repositories (e.g., the iGEM repository, JBEI ICE, and other instances of SynBioHub), the software allows users to browse, upload, and download data in various standard formats, regardless of their location or representation. SynBioHub also provides a central reference point for other resources to link to, delivering design information in a standardized format using the Synthetic Biology Open Language (SBOL). The adoption and use of SynBioHub2, a community-driven effort, has the potential to overcome the reproducibility challenge across laboratories by helping to address the current lack of information about published designs.</p> <p>Also, SynBioHub2 can be used to publish a library of synthetic parts and designs as a service, to share designs with collaborators, and to store designs of biological systems locally. Data in SynBioHub2 can be accessed via the HTTP API, Java API, or Python API where it can then be integrated into CAD tools for building genetic designs. SynBioHub2 contains an interface for users to upload new biological data to the database, to visualize DNA parts, to perform queries to access desired parts, and to download SBOL, GenBank, FASTA, etc.</p> <p>The original version of SynBioHub can be found at https://synbiohub.org.</p>"},{"location":"5_background/about_synbiohub/#license","title":"License","text":"<p>SynBioHub2 is released using the BSD-2-Clause License.</p>"},{"location":"5_background/about_synbiohub/#citation","title":"Citation","text":"<p>If you use SynBioHub2, please cite the following papers:</p> <p>SynBioHub1:</p> <p>[1] J. A. McLaughlin et al., \u201cSynBioHub: A Standards-Enabled Design Repository for Synthetic Biology,\u201d ACS Synth Biol, vol. 7, no. 2, pp. 682\u2013688, Feb. 2018, doi: 10.1021/acssynbio.7b00403.</p> <p>SynBioHub2:</p> <p>&lt;&gt; <p>Additional references for SynBioHub are available here.</p>"},{"location":"5_background/about_synbiohub/#synbiohub2-contributors","title":"SynBioHub2 Contributors","text":"<ul> <li>Daniel Fang (University of Colorado Boulder)</li> <li>Benjamin Hatch (University of Utah)</li> <li>Zane Perry (University of Colorado Boulder)</li> <li>Chunxiao Liao (University of Colorado Boulder)</li> <li>Eric Yu (University of Utah)</li> <li>Bianca Gautam (University of Colorado Boulder)</li> <li>Alex Elbel (University of Utah)</li> <li>Anjala Katuri (University of Colorado Boulder)</li> <li>Ima Mervin (University of Colorado Boulder)</li> <li>Peter Hindes (University of Colorado Boulder)</li> <li>Jeanet Mante (University of Colorado Boulder)</li> <li>Prof. Chris J. Myers (University Of Colorado Boulder)</li> </ul>"},{"location":"5_background/about_synbiohub/#synbiohub1-contributors","title":"SynBioHub1 Contributors","text":"<ul> <li>Dr. James Alastair McLaughlin (European Bioinformatics Institute)</li> <li>Prof. Chris J. Myers (University Of Colorado Boulder)</li> <li>Dr. Goksel Misirli (Keele University)</li> <li>Prof. Anil Wipat (Newcastle University)</li> <li>Zach Zundel (FaceBook)</li> <li>James Scholz (University of Utah)</li> <li>Prubhtej Singh (Guru Gobind Singh Indraprastha University)</li> <li>Jeanet Mante (University of Colorado Boulder)</li> <li>Eric Yu (University of Utah)</li> <li>Michael Zhang (Google)</li> <li>Benjamin Hatch (University of Utah)</li> <li>Daniel Fang (University of Colorado Boulder)</li> </ul> <p>An earlier version of SynBioHub known as SBOL Stack was developed by the following people:</p> <ul> <li>Dr. Curtis Madsen (Boston University)</li> <li>Dr. James Alastair McLaughlin (European Bioinformatics Institute)</li> <li>Dr. Goksel Misirli (Keele University)</li> <li>Dr. Matthew Pocock</li> <li>Dr. Keith Flanagan (Newcastle University)</li> <li>Dr. Jennifer Hallinan (Macquarie University)</li> <li>Prof. Anil Wipat (Newcastle University)</li> </ul>"},{"location":"5_background/glossary/","title":"Glossary","text":"<p>This section contains definitions for various terminologies used in this documentation</p> Terminology Description Combine Archive A COMBINE archive is a single file containing the various documents (and in the future, references to documents), necessary for the description of a model and all associated data and procedures. This includes for instance, but not limited to, simulation experiment descriptions, all models needed to run the simulations and associated data files. The archive is encoded using the Open Modeling EXchange format (OMEX). Component (Definition) Component (Definition) is used to represent biological design components such as DNA, RNA and small molecules. FASTA In bioinformatics and biochemistry, the FASTA format is a text-based format for representing either nucleotide sequences or amino acid (protein) sequences, in which nucleotides or amino acids are represented using single-letter codes. The format also allows for sequence names and comments to precede the sequences. The format originates from the FASTA software package, but has now become a near universal standard in the field of bioinformatics. GFF3 The GFF (General Feature Format) format consists of one line per feature, each containing 9 columns of data, plus optional track definition lines. Image Image is a capture of the Visbol display at the top of the page. Plugin In computing, a plug-in (or plugin, add-in, addin, add-on, or addon) is a software component that adds a specific feature to an existing computer program. When a program supports plug-ins, it enables customization. They function in a way that is similar to browser extensions. They can be installed separately from the browser/SynBioHub and provide additional 'custom' functionality to the browser/SynBioHub experience despite having a completely separate code base from the browser/SynBioHub. SBOL The Synthetic Biology Open Language (SBOL) has been developed as a standard to support the specification and exchange of biological design information in synthetic biology. URI A Uniform Resource Identifier (URI) is a string of characters that unambiguously identifies a particular resource. To guarantee uniformity, all URIs follow a predefined set of syntax rules, but also maintain extensibility through a separately defined hierarchical naming scheme (e.g. http://). Web Of Registries Web of Registries concept i.e, the idea of multiple separate repositories linked together by shared common semantics. The Web Registry Service is a software component that supports the run-time discovery and evaluation of resources such as services, datasets, and application schemes."},{"location":"5_background/refrences/","title":"References","text":"<ul> <li>McLaughlin, James Alastair, et al. \"SynBioHub: a standards-enabled design repository for synthetic biology.\" ACS synthetic biology 7.2 (2018): 682-688.</li> <li>Mante, Jeanet, Zach Zundel, and Chris J. Myers. \"Extending SynBioHub's Functionality with Plugins.\" ACS Synthetic Biology (2020).</li> <li>Zhang, Michael, Zach Zundel, and Chris J. Myers. \"SBOLExplorer: Data Infrastructure and Data Mining for Genetic Design Repositories.\" ACS synthetic biology 8.10 (2019): 2287-2294.</li> </ul>"}]}